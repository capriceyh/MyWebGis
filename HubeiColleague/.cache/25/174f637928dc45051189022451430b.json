{"id":"../node_modules/lerc/LercDecode.js","dependencies":[{"name":"E:\\大三下\\WebGIS\\课设\\MyWebGis\\HubeiColleague\\package.json","includedInParent":true,"mtime":1657194913244},{"name":"E:\\大三下\\WebGIS\\课设\\MyWebGis\\HubeiColleague\\node_modules\\lerc\\package.json","includedInParent":true,"mtime":1647913705500}],"generated":{"js":"var define;\n﻿/* jshint forin: false, bitwise: false */\n/*\nCopyright 2015-2021 Esri\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nA copy of the license and additional notices are located with the\nsource distribution at:\n\nhttp://github.com/Esri/lerc/\n\nContributors:  Johannes Schmid, (LERC v1)\n               Chayanika Khatua, (LERC v1)\n               Wenxue Ju (LERC v1, v2.x)\n*/\n\n/* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\n\n/**\n * a module for decoding LERC blobs\n * @module Lerc\n */\n(function() {\n  //this decoder supports all lerc versions, each version has its own class (LercDecode and Lerc2Decode). \n  //the exported module handles format variation autoamtically.\n\n  //the original LercDecode for Version 1\n  var LercDecode = (function() {\n\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof.\n\n    var CntZImage = {};\n\n    CntZImage.defaultNoDataValue = -3.4027999387901484e+38; // smallest Float32 value\n\n    /**\n     * Decode a LERC byte stream and return an object containing the pixel data and some required and optional\n     * information about it, such as the image's width and height.\n     *\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] Decoding options, containing any of the following properties:\n     * @config {number} [inputOffset = 0]\n     *        Skip the first inputOffset bytes of the input byte stream. A valid LERC file is expected at that position.\n     * @config {Uint8Array} [encodedMask = null]\n     *        If specified, the decoder will not read mask information from the input and use the specified encoded\n     *        mask data instead. Mask header/data must not be present in the LERC byte stream in this case.\n     * @config {number} [noDataValue = LercCode.defaultNoDataValue]\n     *        Pixel value to use for masked pixels.\n     * @config {ArrayBufferView|Array} [pixelType = Float32Array]\n     *        The desired type of the pixelData array in the return value. Note that it is the caller's responsibility to\n     *        provide an appropriate noDataValue if the default pixelType is overridden.\n     * @config {boolean} [returnMask = false]\n     *        If true, the return value will contain a maskData property of type Uint8Array which has one element per\n     *        pixel, the value of which is 1 or 0 depending on whether that pixel's data is present or masked. If the\n     *        input LERC data does not contain a mask, maskData will not be returned.\n     * @config {boolean} [returnEncodedMask = false]\n     *        If true, the return value will contain a encodedMaskData property, which can be passed into encode() as\n     *        encodedMask.\n     * @config {boolean} [returnFileInfo = false]\n     *        If true, the return value will have a fileInfo property that contains metadata obtained from the\n     *        LERC headers and the decoding process.\n     * @config {boolean} [computeUsedBitDepths = false]\n     *        If true, the fileInfo property in the return value will contain the set of all block bit depths\n     *        encountered during decoding. Will only have an effect if returnFileInfo option is true.\n     * @returns {{width, height, pixelData, minValue, maxValue, noDataValue, maskData, encodedMaskData, fileInfo}}\n     */\n    CntZImage.decode = function(input, options) {\n      options = options || {};\n\n      var skipMask = options.encodedMaskData || (options.encodedMaskData === null);\n      var parsedData = parse(input, options.inputOffset || 0, skipMask);\n\n      var noDataValue = (options.noDataValue !== null) ? options.noDataValue : CntZImage.defaultNoDataValue;\n\n      var uncompressedData = uncompressPixelValues(parsedData, options.pixelType || Float32Array,\n        options.encodedMaskData, noDataValue, options.returnMask);\n\n      var result = {\n        width: parsedData.width,\n        height: parsedData.height,\n        pixelData: uncompressedData.resultPixels,\n        minValue: uncompressedData.minValue,\n        maxValue: parsedData.pixels.maxValue,\n        noDataValue: noDataValue\n      };\n\n      if (uncompressedData.resultMask) {\n        result.maskData = uncompressedData.resultMask;\n      }\n\n      if (options.returnEncodedMask && parsedData.mask) {\n        result.encodedMaskData = parsedData.mask.bitset ? parsedData.mask.bitset : null;\n      }\n\n      if (options.returnFileInfo) {\n        result.fileInfo = formatFileInfo(parsedData);\n        if (options.computeUsedBitDepths) {\n          result.fileInfo.bitDepths = computeUsedBitDepths(parsedData);\n        }\n      }\n\n      return result;\n    };\n\n    var uncompressPixelValues = function(data, TypedArrayClass, maskBitset, noDataValue, storeDecodedMask) {\n      var blockIdx = 0;\n      var numX = data.pixels.numBlocksX;\n      var numY = data.pixels.numBlocksY;\n      var blockWidth = Math.floor(data.width / numX);\n      var blockHeight = Math.floor(data.height / numY);\n      var scale = 2 * data.maxZError;\n      var minValue = Number.MAX_VALUE, currentValue;\n      maskBitset = maskBitset || ((data.mask) ? data.mask.bitset : null);\n\n      var resultPixels, resultMask;\n      resultPixels = new TypedArrayClass(data.width * data.height);\n      if (storeDecodedMask && maskBitset) {\n        resultMask = new Uint8Array(data.width * data.height);\n      }\n      var blockDataBuffer = new Float32Array(blockWidth * blockHeight);\n\n      var xx, yy;\n      for (var y = 0; y <= numY; y++) {\n        var thisBlockHeight = (y !== numY) ? blockHeight : (data.height % numY);\n        if (thisBlockHeight === 0) {\n          continue;\n        }\n        for (var x = 0; x <= numX; x++) {\n          var thisBlockWidth = (x !== numX) ? blockWidth : (data.width % numX);\n          if (thisBlockWidth === 0) {\n            continue;\n          }\n\n          var outPtr = y * data.width * blockHeight + x * blockWidth;\n          var outStride = data.width - thisBlockWidth;\n\n          var block = data.pixels.blocks[blockIdx];\n\n          var blockData, blockPtr, constValue;\n          if (block.encoding < 2) {\n            // block is either uncompressed or bit-stuffed (encodings 0 and 1)\n            if (block.encoding === 0) {\n              // block is uncompressed\n              blockData = block.rawData;\n            } else {\n              // block is bit-stuffed\n              unstuff(block.stuffedData, block.bitsPerPixel, block.numValidPixels, block.offset, scale, blockDataBuffer, data.pixels.maxValue);\n              blockData = blockDataBuffer;\n            }\n            blockPtr = 0;\n          }\n          else if (block.encoding === 2) {\n            // block is all 0\n            constValue = 0;\n          }\n          else {\n            // block has constant value (encoding === 3)\n            constValue = block.offset;\n          }\n\n          var maskByte;\n          if (maskBitset) {\n            for (yy = 0; yy < thisBlockHeight; yy++) {\n              if (outPtr & 7) {\n                //\n                maskByte = maskBitset[outPtr >> 3];\n                maskByte <<= outPtr & 7;\n              }\n              for (xx = 0; xx < thisBlockWidth; xx++) {\n                if (!(outPtr & 7)) {\n                  // read next byte from mask\n                  maskByte = maskBitset[outPtr >> 3];\n                }\n                if (maskByte & 128) {\n                  // pixel data present\n                  if (resultMask) {\n                    resultMask[outPtr] = 1;\n                  }\n                  currentValue = (block.encoding < 2) ? blockData[blockPtr++] : constValue;\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                } else {\n                  // pixel data not present\n                  if (resultMask) {\n                    resultMask[outPtr] = 0;\n                  }\n                  resultPixels[outPtr++] = noDataValue;\n                }\n                maskByte <<= 1;\n              }\n              outPtr += outStride;\n            }\n          } else {\n            // mask not present, simply copy block over\n            if (block.encoding < 2) {\n              // duplicating this code block for performance reasons\n              // blockData case:\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  currentValue = blockData[blockPtr++];\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                }\n                outPtr += outStride;\n              }\n            }\n            else {\n              // constValue case:\n              minValue = minValue > constValue ? constValue : minValue;\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  resultPixels[outPtr++] = constValue;\n                }\n                outPtr += outStride;\n              }\n            }\n          }\n          if ((block.encoding === 1) && (blockPtr !== block.numValidPixels)) {\n            throw \"Block and Mask do not match\";\n          }\n          blockIdx++;\n        }\n      }\n\n      return {\n        resultPixels: resultPixels,\n        resultMask: resultMask,\n        minValue: minValue\n      };\n    };\n\n    var formatFileInfo = function(data) {\n      return {\n        \"fileIdentifierString\": data.fileIdentifierString,\n        \"fileVersion\": data.fileVersion,\n        \"imageType\": data.imageType,\n        \"height\": data.height,\n        \"width\": data.width,\n        \"maxZError\": data.maxZError,\n        \"eofOffset\": data.eofOffset,\n        \"mask\": data.mask ? {\n          \"numBlocksX\": data.mask.numBlocksX,\n          \"numBlocksY\": data.mask.numBlocksY,\n          \"numBytes\": data.mask.numBytes,\n          \"maxValue\": data.mask.maxValue\n        } : null,\n        \"pixels\": {\n          \"numBlocksX\": data.pixels.numBlocksX,\n          \"numBlocksY\": data.pixels.numBlocksY,\n          \"numBytes\": data.pixels.numBytes,\n          \"maxValue\": data.pixels.maxValue,\n          \"noDataValue\": data.noDataValue\n        }\n      };\n    };\n\n    var computeUsedBitDepths = function(data) {\n      var numBlocks = data.pixels.numBlocksX * data.pixels.numBlocksY;\n      var bitDepths = {};\n      for (var i = 0; i < numBlocks; i++) {\n        var block = data.pixels.blocks[i];\n        if (block.encoding === 0) {\n          bitDepths.float32 = true;\n        } else if (block.encoding === 1) {\n          bitDepths[block.bitsPerPixel] = true;\n        } else {\n          bitDepths[0] = true;\n        }\n      }\n\n      return Object.keys(bitDepths);\n    };\n\n    var parse = function(input, fp, skipMask) {\n      var data = {};\n\n      // File header\n      var fileIdView = new Uint8Array(input, fp, 10);\n      data.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      if (data.fileIdentifierString.trim() !== \"CntZImage\") {\n        throw \"Unexpected file identifier string: \" + data.fileIdentifierString;\n      }\n      fp += 10;\n      var view = new DataView(input, fp, 24);\n      data.fileVersion = view.getInt32(0, true);\n      data.imageType = view.getInt32(4, true);\n      data.height = view.getUint32(8, true);\n      data.width = view.getUint32(12, true);\n      data.maxZError = view.getFloat64(16, true);\n      fp += 24;\n\n      // Mask Header\n      if (!skipMask) {\n        view = new DataView(input, fp, 16);\n        data.mask = {};\n        data.mask.numBlocksY = view.getUint32(0, true);\n        data.mask.numBlocksX = view.getUint32(4, true);\n        data.mask.numBytes = view.getUint32(8, true);\n        data.mask.maxValue = view.getFloat32(12, true);\n        fp += 16;\n\n        // Mask Data\n        if (data.mask.numBytes > 0) {\n          var bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n          view = new DataView(input, fp, data.mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              var val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < data.mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n          data.mask.bitset = bitset;\n          fp += data.mask.numBytes;\n        }\n        else if ((data.mask.numBytes | data.mask.numBlocksY | data.mask.maxValue) === 0) {  // Special case, all nodata\n          data.mask.bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n        }\n      }\n\n      // Pixel Header\n      view = new DataView(input, fp, 16);\n      data.pixels = {};\n      data.pixels.numBlocksY = view.getUint32(0, true);\n      data.pixels.numBlocksX = view.getUint32(4, true);\n      data.pixels.numBytes = view.getUint32(8, true);\n      data.pixels.maxValue = view.getFloat32(12, true);\n      fp += 16;\n\n      var numBlocksX = data.pixels.numBlocksX;\n      var numBlocksY = data.pixels.numBlocksY;\n      // the number of blocks specified in the header does not take into account the blocks at the end of\n      // each row/column with a special width/height that make the image complete in case the width is not\n      // evenly divisible by the number of blocks.\n      var actualNumBlocksX = numBlocksX + ((data.width % numBlocksX) > 0 ? 1 : 0);\n      var actualNumBlocksY = numBlocksY + ((data.height % numBlocksY) > 0 ? 1 : 0);\n      data.pixels.blocks = new Array(actualNumBlocksX * actualNumBlocksY);\n      var blockI = 0;\n      for (var blockY = 0; blockY < actualNumBlocksY; blockY++) {\n        for (var blockX = 0; blockX < actualNumBlocksX; blockX++) {\n\n          // Block\n          var size = 0;\n          var bytesLeft = input.byteLength - fp;\n          view = new DataView(input, fp, Math.min(10, bytesLeft));\n          var block = {};\n          data.pixels.blocks[blockI++] = block;\n          var headerByte = view.getUint8(0); size++;\n          block.encoding = headerByte & 63;\n          if (block.encoding > 3) {\n            throw \"Invalid block encoding (\" + block.encoding + \")\";\n          }\n          if (block.encoding === 2) {\n            fp++;\n            continue;\n          }\n          if ((headerByte !== 0) && (headerByte !== 2)) {\n            headerByte >>= 6;\n            block.offsetType = headerByte;\n            if (headerByte === 2) {\n              block.offset = view.getInt8(1); size++;\n            } else if (headerByte === 1) {\n              block.offset = view.getInt16(1, true); size += 2;\n            } else if (headerByte === 0) {\n              block.offset = view.getFloat32(1, true); size += 4;\n            } else {\n              throw \"Invalid block offset type\";\n            }\n\n            if (block.encoding === 1) {\n              headerByte = view.getUint8(size); size++;\n              block.bitsPerPixel = headerByte & 63;\n              headerByte >>= 6;\n              block.numValidPixelsType = headerByte;\n              if (headerByte === 2) {\n                block.numValidPixels = view.getUint8(size); size++;\n              } else if (headerByte === 1) {\n                block.numValidPixels = view.getUint16(size, true); size += 2;\n              } else if (headerByte === 0) {\n                block.numValidPixels = view.getUint32(size, true); size += 4;\n              } else {\n                throw \"Invalid valid pixel count type\";\n              }\n            }\n          }\n          fp += size;\n\n          if (block.encoding === 3) {\n            continue;\n          }\n\n          var arrayBuf, store8;\n          if (block.encoding === 0) {\n            var numPixels = (data.pixels.numBytes - 1) / 4;\n            if (numPixels !== Math.floor(numPixels)) {\n              throw \"uncompressed block has invalid length\";\n            }\n            arrayBuf = new ArrayBuffer(numPixels * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, numPixels * 4));\n            var rawData = new Float32Array(arrayBuf);\n            block.rawData = rawData;\n            fp += numPixels * 4;\n          } else if (block.encoding === 1) {\n            var dataBytes = Math.ceil(block.numValidPixels * block.bitsPerPixel / 8);\n            var dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, dataBytes));\n            block.stuffedData = new Uint32Array(arrayBuf);\n            fp += dataBytes;\n          }\n        }\n      }\n      data.eofOffset = fp;\n      return data;\n    };\n\n    var unstuff = function(src, bitsPerPixel, numPixels, offset, scale, dest, maxValue) {\n      var bitMask = (1 << bitsPerPixel) - 1;\n      var i = 0, o;\n      var bitsLeft = 0;\n      var n, buffer;\n      var nmax = Math.ceil((maxValue - offset) / scale);\n      // get rid of trailing bytes that are already part of next block\n      var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n      src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n      for (o = 0; o < numPixels; o++) {\n        if (bitsLeft === 0) {\n          buffer = src[i++];\n          bitsLeft = 32;\n        }\n        if (bitsLeft >= bitsPerPixel) {\n          n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n          bitsLeft -= bitsPerPixel;\n        } else {\n          var missingBits = (bitsPerPixel - bitsLeft);\n          n = ((buffer & bitMask) << missingBits) & bitMask;\n          buffer = src[i++];\n          bitsLeft = 32 - missingBits;\n          n += (buffer >>> bitsLeft);\n        }\n        //pixel values may exceed max due to quantization\n        dest[o] = n < nmax ? offset + n * scale : maxValue;\n      }\n      return dest;\n    };\n\n    return CntZImage;\n  })();\n\n  //version 2. Supports 2.1, 2.2, 2.3\n  var Lerc2Decode = (function() {\n    \"use strict\";\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof, following LercDecode.\n\n    /*****************************************\n    * private static class bitsutffer used by Lerc2Decode\n    *******************************************/\n    var BitStuffer = {\n      //methods ending with 2 are for the new byte order used by Lerc2.3 and above.\n      //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.\n      unstuff: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits, nmax;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            dest[o] = lutArr[n];//offset + lutArr[n] * scale;\n          }\n        }\n        else {\n          nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n      },\n\n      unstuffLUT: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0;\n        var buffer;\n        var dest = [];\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);//1st one\n        return dest;\n      },\n\n      unstuff2: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            dest[o] = lutArr[n];\n          }\n        }\n        else {\n          var nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              //no unsigned left shift\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n        return dest;\n      },\n\n      unstuffLUT2: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0, bitPos = 0;\n        var buffer;\n        var dest = [];\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);\n        return dest;\n      },\n\n      originalUnstuff: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          }\n          else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          dest[o] = n;\n        }\n        return dest;\n      },\n\n      originalUnstuff2: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        //micro-optimizations\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          dest[o] = n;\n        }\n        return dest;\n      }\n    };\n\n    /*****************************************\n    *private static class used by Lerc2Decode\n    ******************************************/\n    var Lerc2Helpers = {\n      HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, treat it like constant\n      computeChecksumFletcher32: function(input) {\n\n        var sum1 = 0xffff, sum2 = 0xffff;\n        var len = input.length;\n        var words = Math.floor(len / 2);\n        var i = 0;\n        while (words) {\n          var tlen = (words >= 359) ? 359 : words;\n          words -= tlen;\n          do {\n            sum1 += (input[i++] << 8);\n            sum2 += sum1 += input[i++];\n          } while (--tlen);\n\n          sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n          sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n        }\n\n        // add the straggler byte if it exists\n        if (len & 1) {\n          sum2 += sum1 += (input[i] << 8);\n        }\n        // second reduction step to reduce sums to 16 bits\n        sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n        sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n\n        return (sum2 << 16 | sum1) >>> 0;\n      },\n\n      readHeaderInfo: function(input, data) {\n        var ptr = data.ptr;\n        var fileIdView = new Uint8Array(input, ptr, 6);\n        var headerInfo = {};\n        headerInfo.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n        if (headerInfo.fileIdentifierString.lastIndexOf(\"Lerc2\", 0) !== 0) {\n          throw \"Unexpected file identifier string (expect Lerc2 ): \" + headerInfo.fileIdentifierString;\n        }\n        ptr += 6;\n        var view = new DataView(input, ptr, 8);\n        var fileVersion = view.getInt32(0, true);\n        headerInfo.fileVersion = fileVersion;\n        ptr += 4;\n        if (fileVersion >= 3) {\n          headerInfo.checksum = view.getUint32(4, true); //nrows\n          ptr += 4;\n        }\n\n        //keys start from here\n        view = new DataView(input, ptr, 12);\n        headerInfo.height = view.getUint32(0, true); //nrows\n        headerInfo.width = view.getUint32(4, true); //ncols\n        ptr += 8;\n        if (fileVersion >= 4) {\n          headerInfo.numDims = view.getUint32(8, true);\n          ptr += 4;\n        }\n        else {\n          headerInfo.numDims = 1;\n        }\n\n        view = new DataView(input, ptr, 40);\n        headerInfo.numValidPixel = view.getUint32(0, true);\n        headerInfo.microBlockSize = view.getInt32(4, true);\n        headerInfo.blobSize = view.getInt32(8, true);\n        headerInfo.imageType = view.getInt32(12, true);\n\n        headerInfo.maxZError = view.getFloat64(16, true);\n        headerInfo.zMin = view.getFloat64(24, true);\n        headerInfo.zMax = view.getFloat64(32, true);\n        ptr += 40;\n        data.headerInfo = headerInfo;\n        data.ptr = ptr;\n\n        var checksum, keyLength;\n        if (fileVersion >= 3) {\n          keyLength = fileVersion >= 4 ? 52 : 48;\n          checksum = this.computeChecksumFletcher32(new Uint8Array(input, ptr - keyLength, headerInfo.blobSize - 14));\n          if (checksum !== headerInfo.checksum) {\n            throw \"Checksum failed.\";\n          }\n        }\n        return true;\n      },\n\n      checkMinMaxRanges: function(input, data) {\n        var headerInfo = data.headerInfo;\n        var OutPixelTypeArray = this.getDataTypeArray(headerInfo.imageType);\n        var rangeBytes = headerInfo.numDims * this.getDataTypeSize(headerInfo.imageType);\n        var minValues = this.readSubArray(input, data.ptr, OutPixelTypeArray, rangeBytes);\n        var maxValues = this.readSubArray(input, data.ptr + rangeBytes, OutPixelTypeArray, rangeBytes);\n        data.ptr += (2 * rangeBytes);\n        var i, equal = true;\n        for (i = 0; i < headerInfo.numDims; i++) {\n          if (minValues[i] !== maxValues[i]) {\n            equal = false;\n            break;\n          }\n        }\n        headerInfo.minValues = minValues;\n        headerInfo.maxValues = maxValues;\n        return equal;\n      },\n\n      readSubArray: function(input, ptr, OutPixelTypeArray, numBytes) {\n        var rawData;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        return rawData;\n      },\n\n      readMask: function(input, data) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var numValidPixel = headerInfo.numValidPixel;\n\n        var view = new DataView(input, ptr, 4);\n        var mask = {};\n        mask.numBytes = view.getUint32(0, true);\n        ptr += 4;\n\n        // Mask Data\n        if ((0 === numValidPixel || numPixels === numValidPixel) && 0 !== mask.numBytes) {\n          throw (\"invalid mask\");\n        }\n        var bitset, resultMask;\n        if (numValidPixel === 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          mask.bitset = bitset;\n          resultMask = new Uint8Array(numPixels);\n          data.pixels.resultMask = resultMask;\n          ptr += mask.numBytes;\n        }// ????? else if (data.mask.numBytes > 0 && data.mask.numBytes< data.numValidPixel) {\n        else if (mask.numBytes > 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          view = new DataView(input, ptr, mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0, val = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n\n          resultMask = new Uint8Array(numPixels);\n          var mb = 0, k = 0;\n\n          for (k = 0; k < numPixels; k++) {\n            if (k & 7) {\n              mb = bitset[k >> 3];\n              mb <<= k & 7;\n            }\n            else {\n              mb = bitset[k >> 3];\n            }\n            if (mb & 128) {\n              resultMask[k] = 1;\n            }\n          }\n          data.pixels.resultMask = resultMask;\n\n          mask.bitset = bitset;\n          ptr += mask.numBytes;\n        }\n        data.ptr = ptr;\n        data.mask = mask;\n        return true;\n      },\n\n      readDataOneSweep: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var imageType = headerInfo.imageType;\n        var numBytes = headerInfo.numValidPixel * Lerc2Helpers.getDataTypeSize(imageType) * numDims;\n        //data.pixels.numBytes = numBytes;\n        var rawData;\n        var mask = data.pixels.resultMask;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        if (rawData.length === numPixels * numDims) {\n          if (useBSQForOutputDim) {\n            data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(rawData, numPixels, numDims, OutPixelTypeArray, true);\n          }\n          else {\n            data.pixels.resultPixels = rawData;\n          }\n        }\n        else  //mask\n        {\n          data.pixels.resultPixels = new OutPixelTypeArray(numPixels * numDims);\n          var z = 0, k = 0, i = 0, nStart = 0;\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k;\n                  for (i = 0; i < numDims; i++, nStart+=numPixels) {\n                    data.pixels.resultPixels[nStart] = rawData[z++];\n                  }\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    data.pixels.resultPixels[nStart + i] = rawData[z++];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                data.pixels.resultPixels[k] = rawData[z++];\n              }\n            }\n          }\n        }\n        ptr += numBytes;\n        data.ptr = ptr;       //return data;\n        return true;\n      },\n\n      readHuffmanTree: function(input, data) {\n        var BITS_MAX = this.HUFFMAN_LUT_BITS_MAX; //8 is slow for the large test image\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading code table\n        *************************/\n        var view = new DataView(input, data.ptr, 16);\n        data.ptr += 16;\n        var version = view.getInt32(0, true);\n        if (version < 2) {\n          throw \"unsupported Huffman version\";\n        }\n        var size = view.getInt32(4, true);\n        var i0 = view.getInt32(8, true);\n        var i1 = view.getInt32(12, true);\n        if (i0 >= i1) {\n          return false;\n        }\n        var blockDataBuffer = new Uint32Array(i1 - i0);\n        Lerc2Helpers.decodeBits(input, data, blockDataBuffer);\n        var codeTable = []; //size\n        var i, j, k, len;\n\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          codeTable[j] = { first: blockDataBuffer[i - i0], second: null };\n        }\n\n        var dataBytes = input.byteLength - data.ptr;\n        var dataWords = Math.ceil(dataBytes / 4);\n        var arrayBuf = new ArrayBuffer(dataWords * 4);\n        var store8 = new Uint8Array(arrayBuf);\n        store8.set(new Uint8Array(input, data.ptr, dataBytes));\n        var stuffedData = new Uint32Array(arrayBuf); //must start from x*4\n        var bitPos = 0, word, srcPtr = 0;\n        word = stuffedData[0];\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            codeTable[j].second = (word << bitPos) >>> (32 - len);\n\n            if (32 - bitPos >= len) {\n              bitPos += len;\n              if (bitPos === 32) {\n                bitPos = 0;\n                srcPtr++;\n                word = stuffedData[srcPtr];\n              }\n            }\n            else {\n              bitPos += len - 32;\n              srcPtr++;\n              word = stuffedData[srcPtr];\n              codeTable[j].second |= word >>> (32 - bitPos);\n            }\n          }\n        }\n\n        //finished reading code table\n\n        /* ************************\n        * building lut\n        *************************/\n        var numBitsLUT = 0, numBitsLUTQick = 0;\n        var tree = new TreeNode();\n        for (i = 0; i < codeTable.length; i++) {\n          if (codeTable[i] !== undefined) {\n            numBitsLUT = Math.max(numBitsLUT, codeTable[i].first);\n          }\n        }\n        if (numBitsLUT >= BITS_MAX) {\n          numBitsLUTQick = BITS_MAX;\n        }\n        else {\n          numBitsLUTQick = numBitsLUT;\n        }\n        // for debugging purpose\n        // if (numBitsLUT >= 30) {\n        //   console.log(\"WARning, large NUM LUT BITS IS \" + numBitsLUT);\n        // }\n        var decodeLut = [], entry, code, numEntries, jj, currentBit, node;\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            entry = [len, j];\n            if (len <= numBitsLUTQick) {\n              code = codeTable[j].second << (numBitsLUTQick - len);\n              numEntries = 1 << (numBitsLUTQick - len);\n              for (k = 0; k < numEntries; k++) {\n                decodeLut[code | k] = entry;\n              }\n            }\n            else {\n              //build tree\n              code = codeTable[j].second;\n              node = tree;\n              for (jj = len - 1; jj >= 0; jj--) {\n                currentBit = code >>> jj & 1; //no left shift as length could be 30,31\n                if (currentBit) {\n                  if (!node.right) {\n                    node.right = new TreeNode();\n                  }\n                  node = node.right;\n                }\n                else {\n                  if (!node.left) {\n                    node.left = new TreeNode();\n                  }\n                  node = node.left;\n                }\n                if (jj === 0 && !node.val) {\n                  node.val = entry[1];\n                }\n              }\n            }\n          }\n        }\n        return {\n          decodeLut: decodeLut,\n          numBitsLUTQick: numBitsLUTQick,\n          numBitsLUT: numBitsLUT,\n          tree: tree,\n          stuffedData: stuffedData,\n          srcPtr: srcPtr,\n          bitPos: bitPos\n        };\n      },\n\n      readHuffman: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var height = data.headerInfo.height;\n        var width = data.headerInfo.width;\n        var numPixels = width * height;\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading huffman structure info\n        *************************/\n        var huffmanInfo = this.readHuffmanTree(input, data);\n        var decodeLut = huffmanInfo.decodeLut;\n        var tree = huffmanInfo.tree;\n        //stuffedData includes huffman headers\n        var stuffedData = huffmanInfo.stuffedData;\n        var srcPtr = huffmanInfo.srcPtr;\n        var bitPos = huffmanInfo.bitPos;\n        var numBitsLUTQick = huffmanInfo.numBitsLUTQick;\n        var numBitsLUT = huffmanInfo.numBitsLUT;\n        var offset = data.headerInfo.imageType === 0 ? 128 : 0;\n        /*************************\n        *  decode\n        ***************************/\n        var node, val, delta, mask = data.pixels.resultMask, valTmp, valTmpQuick, currentBit;\n        var i, j, k, ii;\n        var prevVal = 0;\n        if (bitPos > 0) {\n          srcPtr++;\n          bitPos = 0;\n        }\n        var word = stuffedData[srcPtr];\n        var deltaEncode = data.encodeMode === 1;\n        var resultPixelsAllDim = new OutPixelTypeArray(numPixels * numDims);\n        var resultPixels = resultPixelsAllDim;\n        var iDim;\n        // TODO: reevaluate the need to keep inlined decoding code as IE support is phasing out\n        if (numDims < 2 || deltaEncode) {\n          for (iDim = 0; iDim < numDims; iDim++) {\n            if (numDims > 1) {\n              //get the mem block of current dimension\n              resultPixels = new OutPixelTypeArray(resultPixelsAllDim.buffer, numPixels * iDim, numPixels);\n              prevVal = 0;\n            }\n            if (data.headerInfo.numValidPixel === width * height) { //all valid\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;// >>> deltaBits;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                  }\n                  if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n    \n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n    \n                  delta = val - offset;\n                  if (deltaEncode) {\n                    if (j > 0) {\n                      delta += prevVal;    // use overflow\n                    }\n                    else if (i > 0) {\n                      delta += resultPixels[k - width];\n                    }\n                    else {\n                      delta += prevVal;\n                    }\n                    delta &= 0xFF; //overflow\n                    resultPixels[k] = delta;//overflow\n                    prevVal = delta;\n                  }\n                  else {\n                    resultPixels[k] = delta;\n                  }\n                }\n              }\n            }\n            else { //not all valid, use mask\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  if (mask[k]) {\n                    val = 0;\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUTQick) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                    {\n                      val = decodeLut[valTmpQuick][1];\n                      bitPos += decodeLut[valTmpQuick][0];\n                    }\n                    else {\n                      valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                      if (32 - bitPos < numBitsLUT) {\n                        valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                        valTmpQuick = valTmp;// >>> deltaBits;\n                      }\n                      node = tree;\n                      for (ii = 0; ii < numBitsLUT; ii++) {\n                        currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                        node = currentBit ? node.right : node.left;\n                        if (!(node.left || node.right)) {\n                          val = node.val;\n                          bitPos = bitPos + ii + 1;\n                          break;\n                        }\n                      }\n                    }\n    \n                    if (bitPos >= 32) {\n                      bitPos -= 32;\n                      srcPtr++;\n                      word = stuffedData[srcPtr];\n                    }\n    \n                    delta = val - offset;\n                    if (deltaEncode) {\n                      if (j > 0 && mask[k - 1]) {\n                        delta += prevVal;    // use overflow\n                      }\n                      else if (i > 0 && mask[k - width]) {\n                        delta += resultPixels[k - width];\n                      }\n                      else {\n                        delta += prevVal;\n                      }\n    \n                      delta &= 0xFF; //overflow\n                      resultPixels[k] = delta;//overflow\n                      prevVal = delta;\n                    }\n                    else {\n                      resultPixels[k] = delta;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          for (k = 0, i = 0; i < height; i++) {\n            for (j = 0; j < width; j++) {\n              k = i * width + j;\n              if (!mask || mask[k]) {\n                for (iDim = 0; iDim < numDims; iDim++, k+=numPixels) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;\n                  }\n                  if (decodeLut[valTmpQuick])\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n\n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n\n                  delta = val - offset;\n                  resultPixels[k] = delta;\n                }\n              }\n            }\n          }\n        }\n        data.ptr = data.ptr + (srcPtr + 1) * 4 + (bitPos > 0 ? 4 : 0);\n        data.pixels.resultPixels = resultPixelsAllDim;\n        //swap for BIP layout\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(resultPixelsAllDim, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      decodeBits: function(input, data, blockDataBuffer, offset, iDim) {\n        {\n          //bitstuff encoding is 3\n          var headerInfo = data.headerInfo;\n          var fileVersion = headerInfo.fileVersion;\n          //var block = {};\n          var blockPtr = 0;\n          var viewByteLength = ((input.byteLength - data.ptr) >= 5) ? 5 : (input.byteLength - data.ptr);\n          var view = new DataView(input, data.ptr, viewByteLength);\n          var headerByte = view.getUint8(0);\n          blockPtr++;\n          var bits67 = headerByte >> 6;\n          var n = (bits67 === 0) ? 4 : 3 - bits67;\n          var doLut = (headerByte & 32) > 0 ? true : false;//5th bit\n          var numBits = headerByte & 31;\n          var numElements = 0;\n          if (n === 1) {\n            numElements = view.getUint8(blockPtr); blockPtr++;\n          } else if (n === 2) {\n            numElements = view.getUint16(blockPtr, true); blockPtr += 2;\n          } else if (n === 4) {\n            numElements = view.getUint32(blockPtr, true); blockPtr += 4;\n          } else {\n            throw \"Invalid valid pixel count type\";\n          }\n          //fix: huffman codes are bit stuffed, but not bound by data's max value, so need to use originalUnstuff\n          //offset = offset || 0;\n          var scale = 2 * headerInfo.maxZError;\n          var stuffedData, arrayBuf, store8, dataBytes, dataWords;\n          var lutArr, lutData, lutBytes, lutBitsPerElement, bitsPerPixel;\n          var zMax = headerInfo.numDims > 1 ? headerInfo.maxValues[iDim] : headerInfo.zMax;\n          if (doLut) {\n            data.counter.lut++;\n            lutBytes = view.getUint8(blockPtr);\n            lutBitsPerElement = numBits;\n            blockPtr++;\n            dataBytes = Math.ceil((lutBytes - 1) * numBits / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n\n            data.ptr += blockPtr;\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n\n            lutData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n\n            bitsPerPixel = 0;\n            while ((lutBytes - 1) >>> bitsPerPixel) {\n              bitsPerPixel++;\n            }\n            dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n            stuffedData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n            if (fileVersion >= 3) {\n              lutArr = BitStuffer.unstuffLUT2(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            else {\n              lutArr = BitStuffer.unstuffLUT(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            //lutArr.unshift(0);\n            if (fileVersion >= 3) {\n              //BitStuffer.unstuff2(block, blockDataBuffer, headerInfo.zMax);\n              BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n            else {\n              BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n          }\n          else {\n            //console.debug(\"bitstuffer\");\n            data.counter.bitstuffer++;\n            bitsPerPixel = numBits;\n            data.ptr += blockPtr;\n            if (bitsPerPixel > 0) {\n              dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n              dataWords = Math.ceil(dataBytes / 4);\n              arrayBuf = new ArrayBuffer(dataWords * 4);\n              store8 = new Uint8Array(arrayBuf);\n              store8.set(new Uint8Array(input, data.ptr, dataBytes));\n              stuffedData = new Uint32Array(arrayBuf);\n              data.ptr += dataBytes;\n              if (fileVersion >= 3) {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n              else {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n            }\n          }\n        }\n\n      },\n\n      readTiles: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var width = headerInfo.width;\n        var height = headerInfo.height;\n        var numPixels = width * height;\n        var microBlockSize = headerInfo.microBlockSize;\n        var imageType = headerInfo.imageType;\n        var dataTypeSize = Lerc2Helpers.getDataTypeSize(imageType);\n        var numBlocksX = Math.ceil(width / microBlockSize);\n        var numBlocksY = Math.ceil(height / microBlockSize);\n        data.pixels.numBlocksY = numBlocksY;\n        data.pixels.numBlocksX = numBlocksX;\n        data.pixels.ptr = 0;\n        var row = 0, col = 0, blockY = 0, blockX = 0, thisBlockHeight = 0, thisBlockWidth = 0, bytesLeft = 0, headerByte = 0, bits67 = 0, testCode = 0, outPtr = 0, outStride = 0, numBytes = 0, bytesleft = 0, z = 0, blockPtr = 0;\n        var view, block, arrayBuf, store8, rawData;\n        var blockEncoding;\n        var blockDataBuffer = new OutPixelTypeArray(microBlockSize * microBlockSize);\n        var lastBlockHeight = (height % microBlockSize) || microBlockSize;\n        var lastBlockWidth = (width % microBlockSize) || microBlockSize;\n        var offsetType, offset;\n        var numDims = headerInfo.numDims, iDim;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        var fileVersion = headerInfo.fileVersion;\n        var fileVersionCheckNum = fileVersion >= 5 ? 14 : 15;\n        var isDiffEncoding;\n        var zMax = headerInfo.zMax;\n        //var resultPixelsAllDim = resultPixels;\n        var resultPixelsPrevDim;\n        for (blockY = 0; blockY < numBlocksY; blockY++) {\n          thisBlockHeight = (blockY !== numBlocksY - 1) ? microBlockSize : lastBlockHeight;\n          for (blockX = 0; blockX < numBlocksX; blockX++) {\n            //console.debug(\"y\" + blockY + \" x\" + blockX);\n            thisBlockWidth = (blockX !== numBlocksX - 1) ? microBlockSize : lastBlockWidth;\n\n            outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n            outStride = width - thisBlockWidth;\n\n            for (iDim = 0; iDim < numDims; iDim++) {\n              if (numDims > 1) {\n                resultPixelsPrevDim = resultPixels;\n                outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n                resultPixels = new OutPixelTypeArray(data.pixels.resultPixels.buffer, numPixels * iDim * dataTypeSize, numPixels);\n                zMax = headerInfo.maxValues[iDim];\n              } else {\n                resultPixelsPrevDim = null;\n              }\n              bytesLeft = input.byteLength - data.ptr;\n              view = new DataView(input, data.ptr, Math.min(10, bytesLeft));\n              block = {};\n              blockPtr = 0;\n              headerByte = view.getUint8(0);\n              blockPtr++;\n              isDiffEncoding = headerInfo.fileVersion >= 5 ? headerByte & 4 : 0;\n              bits67 = (headerByte >> 6) & 0xFF;\n              testCode = (headerByte >> 2) & fileVersionCheckNum;    // use bits 2345 for integrity check\n              if (testCode !== (((blockX * microBlockSize) >> 3) & fileVersionCheckNum)) {\n                throw \"integrity issue\";\n              }\n\n              if (isDiffEncoding && iDim === 0) {\n                throw \"integrity issue\";\n              }\n\n              blockEncoding = headerByte & 3;\n              if (blockEncoding > 3) {\n                data.ptr += blockPtr;\n                throw \"Invalid block encoding (\" + blockEncoding + \")\";\n              }\n              else if (blockEncoding === 2) { //constant 0\n                if (isDiffEncoding) {\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        }\n                        outPtr++;\n                      }\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        outPtr++;\n                      }\n                    }\n                  }\n                }\n                data.counter.constant++;\n                data.ptr += blockPtr;\n                continue;\n              }\n              else if (blockEncoding === 0) {  //uncompressed\n                if (isDiffEncoding) {\n                  // doesn't make sense, should not happen\n                  throw \"integrity issue\";\n                }\n                data.counter.uncompressed++;\n                data.ptr += blockPtr;\n                numBytes = thisBlockHeight * thisBlockWidth * dataTypeSize;\n                bytesleft = input.byteLength - data.ptr;\n                numBytes = numBytes < bytesleft ? numBytes : bytesleft;\n                //bit alignment\n                arrayBuf = new ArrayBuffer((numBytes % dataTypeSize) === 0 ? numBytes : (numBytes + dataTypeSize - numBytes % dataTypeSize));\n                store8 = new Uint8Array(arrayBuf);\n                store8.set(new Uint8Array(input, data.ptr, numBytes));\n                rawData = new OutPixelTypeArray(arrayBuf);\n                z = 0;\n                if (mask) {\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      if (mask[outPtr]) {\n                        resultPixels[outPtr] = rawData[z++];\n                      }\n                      outPtr++;\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                else {//all valid\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      resultPixels[outPtr++] = rawData[z++];\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                data.ptr += z * dataTypeSize;\n              }\n              else { //1 or 3\n                offsetType = Lerc2Helpers.getDataTypeUsed((isDiffEncoding && imageType < 6) ? 4 : imageType, bits67);\n                offset = Lerc2Helpers.getOnePixel(block, blockPtr, offsetType, view);\n                blockPtr += Lerc2Helpers.getDataTypeSize(offsetType);\n                if (blockEncoding === 3) //constant offset value\n                {\n                  data.ptr += blockPtr;\n                  data.counter.constantoffset++;\n                  //you can delete the following resultMask case in favor of performance because val is constant and users use nodata mask, otherwise nodatavalue post processing handles it too.\n                  //while the above statement is true, we're not doing it as we want to keep invalid pixel value at 0 rather than arbitrary values\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n                else { //bitstuff encoding is 3\n                  data.ptr += blockPtr;\n                  //heavy lifting\n                  Lerc2Helpers.decodeBits(input, data, blockDataBuffer, offset, iDim);\n                  blockPtr = 0;\n                  // duplicate code to favor performance, diff encoding is for multidimension only\n                  if (isDiffEncoding) {\n                    if (mask) {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          if (mask[outPtr]) {\n                            resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          }\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                    else {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                  }\n                  else if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++];\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr++] = blockDataBuffer[blockPtr++];\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        //swap for BIP: it's always easier for clients to handle BSQ so we keep existing logic and introduce a swap here to minimze changes\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(data.pixels.resultPixels, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      /*****************\n      *  private methods (helper methods)\n      *****************/\n\n      formatFileInfo: function(data) {\n        return {\n          \"fileIdentifierString\": data.headerInfo.fileIdentifierString,\n          \"fileVersion\": data.headerInfo.fileVersion,\n          \"imageType\": data.headerInfo.imageType,\n          \"height\": data.headerInfo.height,\n          \"width\": data.headerInfo.width,\n          \"numValidPixel\": data.headerInfo.numValidPixel,\n          \"microBlockSize\": data.headerInfo.microBlockSize,\n          \"blobSize\": data.headerInfo.blobSize,\n          \"maxZError\": data.headerInfo.maxZError,\n          \"pixelType\": Lerc2Helpers.getPixelType(data.headerInfo.imageType),\n          \"eofOffset\": data.eofOffset,\n          \"mask\": data.mask ? {\n            \"numBytes\": data.mask.numBytes\n          } : null,\n          \"pixels\": {\n            \"numBlocksX\": data.pixels.numBlocksX,\n            \"numBlocksY\": data.pixels.numBlocksY,\n            //\"numBytes\": data.pixels.numBytes,\n            \"maxValue\": data.headerInfo.zMax,\n            \"minValue\": data.headerInfo.zMin,\n            \"noDataValue\": data.noDataValue\n          }\n        };\n      },\n\n      constructConstantSurface: function(data, useBSQForOutputDim) {\n        var val = data.headerInfo.zMax;\n        var valMin = data.headerInfo.zMin;\n        var maxValues = data.headerInfo.maxValues;\n        var numDims = data.headerInfo.numDims;\n        var numPixels = data.headerInfo.height * data.headerInfo.width;\n        var i = 0, k = 0, nStart = 0;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        if (mask) {\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  if (mask[k]) {\n                    resultPixels[nStart + k] = val;\n                  }\n                }\n              }  \n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    resultPixels[nStart + numDims] = maxValues[i];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                resultPixels[k] = val;\n              }\n            }\n          }\n        }\n        else {\n          if (numDims > 1 && valMin !== val) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  resultPixels[nStart + k] = val;\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                nStart = k * numDims;\n                for (i = 0; i < numDims; i++) {\n                  resultPixels[nStart + i] = maxValues[i];\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels * numDims; k++) {\n              resultPixels[k] = val;\n            }\n          }\n        }\n        return;\n      },\n\n      getDataTypeArray: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = Int8Array;\n            break;\n          case 1: //byte\n            tp = Uint8Array;\n            break;\n          case 2: //short\n            tp = Int16Array;\n            break;\n          case 3: //ushort\n            tp = Uint16Array;\n            break;\n          case 4:\n            tp = Int32Array;\n            break;\n          case 5:\n            tp = Uint32Array;\n            break;\n          case 6:\n            tp = Float32Array;\n            break;\n          case 7:\n            tp = Float64Array;\n            break;\n          default:\n            tp = Float32Array;\n        }\n        return tp;\n      },\n\n      getPixelType: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = \"S8\";\n            break;\n          case 1: //byte\n            tp = \"U8\";\n            break;\n          case 2: //short\n            tp = \"S16\";\n            break;\n          case 3: //ushort\n            tp = \"U16\";\n            break;\n          case 4:\n            tp = \"S32\";\n            break;\n          case 5:\n            tp = \"U32\";\n            break;\n          case 6:\n            tp = \"F32\";\n            break;\n          case 7:\n            tp = \"F64\";\n            break;\n          default:\n            tp = \"F32\";\n        }\n        return tp;\n      },\n\n      isValidPixelValue: function(t, val) {\n        if (val == null) {\n          return false;\n        }\n        var isValid;\n        switch (t) {\n          case 0: //char\n            isValid = val >= -128 && val <= 127;\n            break;\n          case 1: //byte  (unsigned char)\n            isValid = val >= 0 && val <= 255;\n            break;\n          case 2: //short\n            isValid = val >= -32768 && val <= 32767;\n            break;\n          case 3: //ushort\n            isValid = val >= 0 && val <= 65536;\n            break;\n          case 4: //int 32\n            isValid = val >= -2147483648 && val <= 2147483647;\n            break;\n          case 5: //uinit 32\n            isValid = val >= 0 && val <= 4294967296;\n            break;\n          case 6:\n            isValid = val >= -3.4027999387901484e+38 && val <= 3.4027999387901484e+38;\n            break;\n          case 7:\n            isValid = val >= -1.7976931348623157e+308 && val <= 1.7976931348623157e+308;\n            break;\n          default:\n            isValid = false;\n        }\n        return isValid;\n      },\n\n      getDataTypeSize: function(t) {\n        var s = 0;\n        switch (t) {\n          case 0: //ubyte\n          case 1: //byte\n            s = 1;\n            break;\n          case 2: //short\n          case 3: //ushort\n            s = 2;\n            break;\n          case 4:\n          case 5:\n          case 6:\n            s = 4;\n            break;\n          case 7:\n            s = 8;\n            break;\n          default:\n            s = t;\n        }\n        return s;\n      },\n\n      getDataTypeUsed: function(dt, tc) {\n        var t = dt;\n        switch (dt) {\n          case 2: //short\n          case 4: //long\n            t = dt - tc;\n            break;\n          case 3: //ushort\n          case 5: //ulong\n            t = dt - 2 * tc;\n            break;\n          case 6: //float\n            if (0 === tc) {\n              t = dt;\n            }\n            else if (1 === tc) {\n              t = 2;\n            }\n            else {\n              t = 1;//byte\n            }\n            break;\n          case 7: //double\n            if (0 === tc) {\n              t = dt;\n            }\n            else {\n              t = dt - 2 * tc + 1;\n            }\n            break;\n          default:\n            t = dt;\n            break;\n        }\n        return t;\n      },\n\n      getOnePixel: function(block, blockPtr, offsetType, view) {\n        var temp = 0;\n        switch (offsetType) {\n          case 0: //char\n            temp = view.getInt8(blockPtr);\n            break;\n          case 1: //byte\n            temp = view.getUint8(blockPtr);\n            break;\n          case 2:\n            temp = view.getInt16(blockPtr, true);\n            break;\n          case 3:\n            temp = view.getUint16(blockPtr, true);\n            break;\n          case 4:\n            temp = view.getInt32(blockPtr, true);\n            break;\n          case 5:\n            temp = view.getUInt32(blockPtr, true);\n            break;\n          case 6:\n            temp = view.getFloat32(blockPtr, true);\n            break;\n          case 7:\n            temp = view.getFloat64(blockPtr, true);\n            break;\n          default:\n            throw (\"the decoder does not understand this pixel type\");\n        }\n        return temp;\n      },\n\n      swapDimensionOrder: function(pixels, numPixels, numDims, OutPixelTypeArray, inputIsBIP) {\n        var i = 0, j = 0, iDim = 0, temp = 0, swap = pixels;\n        if (numDims > 1) {\n          swap = new OutPixelTypeArray(numPixels * numDims);\n          if (inputIsBIP) {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[temp] = pixels[j++];\n              }\n            }  \n          }\n          else {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[j++] = pixels[temp];\n              }\n            }\n          }\n        }\n        return swap;\n      }\n    };\n\n    /***************************************************\n    *private class for a tree node. Huffman code is in Lerc2Helpers\n    ****************************************************/\n    var TreeNode = function(val, left, right) {\n      this.val = val;\n      this.left = left;\n      this.right = right;\n    };\n\n    var Lerc2Decode = {\n      /*\n      * ********removed options compared to LERC1. We can bring some of them back if needed.\n       * removed pixel type. LERC2 is typed and doesn't require user to give pixel type\n       * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.\n       * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.\n       * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,\n       *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.\n       *       We can add it back later if their's a clear requirement.\n       * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)\n       * removed computeUsedBitDepths.\n       *\n       *\n       * response changes compared to LERC1\n       * 1. encodedMaskData is not available\n       * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)\n       * 3. maskData is always available\n      */\n      /*****************\n      *  public properties\n      ******************/\n      //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable\n\n      /*****************\n      *  public methods\n      *****************/\n\n      /**\n       * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.\n       *\n       * @param {ArrayBuffer} input The LERC input byte stream\n       * @param {object} [options] options Decoding options\n       * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position\n       * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process\n       * @param {boolean} [options.returnPixelInterleavedDims]  If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n       */\n      decode: function(/*byte array*/ input, /*object*/ options) {\n        //currently there's a bug in the sparse array, so please do not set to false\n        options = options || {};\n        var noDataValue = options.noDataValue;\n\n        //initialize\n        var i = 0, data = {};\n        data.ptr = options.inputOffset || 0;\n        data.pixels = {};\n\n        // File header\n        if (!Lerc2Helpers.readHeaderInfo(input, data)) {\n          return;\n        }\n\n        var headerInfo = data.headerInfo;\n        var fileVersion = headerInfo.fileVersion;\n        var OutPixelTypeArray = Lerc2Helpers.getDataTypeArray(headerInfo.imageType);\n\n        // version check\n        if (fileVersion > 5) {\n          throw \"unsupported lerc version 2.\" + fileVersion;\n        }\n\n        // Mask Header\n        Lerc2Helpers.readMask(input, data);\n        if (headerInfo.numValidPixel !== headerInfo.width * headerInfo.height && !data.pixels.resultMask) {\n          data.pixels.resultMask = options.maskData;\n        }\n\n        var numPixels = headerInfo.width * headerInfo.height;\n        data.pixels.resultPixels = new OutPixelTypeArray(numPixels * headerInfo.numDims);\n\n        data.counter = {\n          onesweep: 0,\n          uncompressed: 0,\n          lut: 0,\n          bitstuffer: 0,\n          constant: 0,\n          constantoffset: 0\n        };\n        var useBSQForOutputDim = !options.returnPixelInterleavedDims;\n        if (headerInfo.numValidPixel !== 0) {\n          //not tested\n          if (headerInfo.zMax === headerInfo.zMin) //constant surface\n          {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else if (fileVersion >= 4 && Lerc2Helpers.checkMinMaxRanges(input, data)) {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else {\n            var view = new DataView(input, data.ptr, 2);\n            var bReadDataOneSweep = view.getUint8(0);\n            data.ptr++;\n            if (bReadDataOneSweep) {\n              //console.debug(\"OneSweep\");\n              Lerc2Helpers.readDataOneSweep(input, data, OutPixelTypeArray, useBSQForOutputDim);\n            }\n            else {\n              //lerc2.1: //bitstuffing + lut\n              //lerc2.2: //bitstuffing + lut + huffman\n              //lerc2.3: new bitstuffer\n              if (fileVersion > 1 && headerInfo.imageType <= 1 && Math.abs(headerInfo.maxZError - 0.5) < 0.00001) {\n                //this is 2.x plus 8 bit (unsigned and signed) data, possiblity of Huffman\n                var flagHuffman = view.getUint8(1);\n                data.ptr++;\n                data.encodeMode = flagHuffman;\n                if (flagHuffman > 2 || (fileVersion < 4 && flagHuffman > 1)) {\n                  throw \"Invalid Huffman flag \" + flagHuffman;\n                }\n                if (flagHuffman) {//1 - delta Huffman, 2 - Huffman\n                  //console.log(\"Huffman\");\n                  Lerc2Helpers.readHuffman(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n                else {\n                  //console.log(\"Tiles\");\n                  Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n              }\n              else { //lerc2.x non-8 bit data\n                //console.log(\"Tiles\");\n                Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n              }\n            }\n          }\n        }\n\n        data.eofOffset = data.ptr;\n        var diff;\n        if (options.inputOffset) {\n          diff = data.headerInfo.blobSize + options.inputOffset - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect eof: dataptr \" + data.ptr + \" offset \" + options.inputOffset + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = options.inputOffset + data.headerInfo.blobSize;\n          }\n        }\n        else {\n          diff = data.headerInfo.blobSize - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect first band eof: dataptr \" + data.ptr + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = data.headerInfo.blobSize;\n          }\n        }\n\n        var result = {\n          width: headerInfo.width,\n          height: headerInfo.height,\n          pixelData: data.pixels.resultPixels,\n          minValue: headerInfo.zMin,\n          maxValue: headerInfo.zMax,\n          validPixelCount: headerInfo.numValidPixel,\n          dimCount: headerInfo.numDims,\n          dimStats: {\n            minValues: headerInfo.minValues,\n            maxValues: headerInfo.maxValues\n          },\n          maskData: data.pixels.resultMask\n          //noDataValue: noDataValue\n        };\n\n        //we should remove this if there's no existing client\n        //optional noDataValue processing, it's user's responsiblity\n        if (data.pixels.resultMask && Lerc2Helpers.isValidPixelValue(headerInfo.imageType, noDataValue)) {\n          var mask = data.pixels.resultMask;\n          for (i = 0; i < numPixels; i++) {\n            if (!mask[i]) {\n              result.pixelData[i] = noDataValue;\n            }\n          }\n          result.noDataValue = noDataValue;\n        }\n        data.noDataValue = noDataValue;\n        if (options.returnFileInfo) {\n          result.fileInfo = Lerc2Helpers.formatFileInfo(data);\n        }\n        return result;\n      },\n\n      getBandCount: function(/*byte array*/ input) {\n        var count = 0;\n        var i = 0;\n        var temp = {};\n        temp.ptr = 0;\n        temp.pixels = {};\n        while (i < input.byteLength - 58) {\n          Lerc2Helpers.readHeaderInfo(input, temp);\n          i += temp.headerInfo.blobSize;\n          count++;\n          temp.ptr = i;\n        }\n        return count;\n      }\n    };\n\n    return Lerc2Decode;\n  })();\n\n  var isPlatformLittleEndian = (function() {\n    var a = new ArrayBuffer(4);\n    var b = new Uint8Array(a);\n    var c = new Uint32Array(a);\n    c[0] = 1;\n    return b[0] === 1;\n  })();\n\n  var Lerc = {\n    /************wrapper**********************************************/\n    /**\n     * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.\n     *\n     * @alias module:Lerc\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] The decoding options below are optional.\n     * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.\n     * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.\n     * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.\n     * @param {boolean} [options.returnPixelInterleavedDims] (nDim LERC2 only) If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n     * @returns {{width, height, pixels, pixelType, mask, statistics}}\n       * @property {number} width Width of decoded image.\n       * @property {number} height Height of decoded image.\n       * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.\n       * @property {string} pixelType The type of pixels represented in the output.\n       * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.\n       * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values\n    **/\n    decode: function(encodedData, options) {\n      if (!isPlatformLittleEndian) {\n        throw \"Big endian system is not supported.\";\n      }\n      options = options || {};\n      var inputOffset = options.inputOffset || 0;\n      var fileIdView = new Uint8Array(encodedData, inputOffset, 10);\n      var fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      var lerc, majorVersion;\n      if (fileIdentifierString.trim() === \"CntZImage\") {\n        lerc = LercDecode;\n        majorVersion = 1;\n      }\n      else if (fileIdentifierString.substring(0, 5) === \"Lerc2\") {\n        lerc = Lerc2Decode;\n        majorVersion = 2;\n      }\n      else {\n        throw \"Unexpected file identifier string: \" + fileIdentifierString;\n      }\n\n      var iPlane = 0, eof = encodedData.byteLength - 10, encodedMaskData, bandMasks = [], bandMask, maskData;\n      var decodedPixelBlock = {\n        width: 0,\n        height: 0,\n        pixels: [],\n        pixelType: options.pixelType,\n        mask: null,\n        statistics: []\n      };\n      var uniqueBandMaskCount = 0;\n\n      while (inputOffset < eof) {\n        var result = lerc.decode(encodedData, {\n          inputOffset: inputOffset,//for both lerc1 and lerc2\n          encodedMaskData: encodedMaskData,//lerc1 only\n          maskData: maskData,//lerc2 only\n          returnMask: iPlane === 0 ? true : false,//lerc1 only\n          returnEncodedMask: iPlane === 0 ? true : false,//lerc1 only\n          returnFileInfo: true,//for both lerc1 and lerc2\n          returnPixelInterleavedDims: options.returnPixelInterleavedDims,//for ndim lerc2 only\n          pixelType: options.pixelType || null,//lerc1 only\n          noDataValue: options.noDataValue || null//lerc1 only\n        });\n\n        inputOffset = result.fileInfo.eofOffset;\n        maskData = result.maskData;//lerc2\n        if (iPlane === 0) {\n          encodedMaskData = result.encodedMaskData;//lerc1\n          decodedPixelBlock.width = result.width;\n          decodedPixelBlock.height = result.height;\n          decodedPixelBlock.dimCount = result.dimCount || 1;\n          //decodedPixelBlock.dimStats = decodedPixelBlock.dimStats;\n          decodedPixelBlock.pixelType = result.pixelType || result.fileInfo.pixelType;\n          decodedPixelBlock.mask = maskData;\n        }\n        if (majorVersion > 1) {\n          if (maskData) {\n            bandMasks.push(maskData);\n          }\n          if (result.fileInfo.mask && result.fileInfo.mask.numBytes > 0) {\n            uniqueBandMaskCount++;\n          }\n        }\n\n        iPlane++;\n        decodedPixelBlock.pixels.push(result.pixelData);\n        decodedPixelBlock.statistics.push({\n          minValue: result.minValue,\n          maxValue: result.maxValue,\n          noDataValue: result.noDataValue,\n          dimStats: result.dimStats\n        });\n      }\n      var i, j, numPixels;\n      if (majorVersion > 1 && uniqueBandMaskCount > 1) {\n        numPixels = decodedPixelBlock.width * decodedPixelBlock.height;\n        decodedPixelBlock.bandMasks = bandMasks;\n        maskData = new Uint8Array(numPixels);\n        maskData.set(bandMasks[0]);\n        for (i = 1; i < bandMasks.length; i++) {\n          bandMask = bandMasks[i];\n          for (j = 0; j < numPixels; j++) {\n            maskData[j] = maskData[j] & bandMask[j];\n          }\n        }\n        decodedPixelBlock.maskData = maskData;\n      }\n\n      return decodedPixelBlock;\n    }\n  };\n\n  if (typeof define === \"function\" && define.amd) {/* jshint ignore:line */\n    //amd loaders such as dojo and requireJS\n    //http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\n    define([], function() { return Lerc; });/* jshint ignore:line */\n  }\n  else if (typeof module !== \"undefined\" && module.exports) {/* jshint ignore:line */\n    //commonJS module 1.0/1.1/1.1.1 systems, such as nodeJS\n    //http://wiki.commonjs.org/wiki/Modules\n    module.exports = Lerc;/* jshint ignore:line */\n  }\n  else {\n    //assign to this, most likely window\n    this.Lerc = Lerc;\n  }\n\n})();\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":557,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":558,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":559,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":560,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":561,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":562,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":563,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":564,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":565,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":566,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":567,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":568,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":569,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":570,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":571,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":572,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":573,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":574,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":575,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":576,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":577,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":578,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":579,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":580,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":581,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":582,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":583,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":584,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":585,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":586,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":587,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":588,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":589,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":590,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":591,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":592,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":593,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":594,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":595,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":596,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":597,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":598,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":599,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":600,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":601,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":602,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":603,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":604,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":605,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":606,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":607,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":608,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":609,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":610,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":611,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":612,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":613,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":614,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":615,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":616,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":617,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":618,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":619,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":620,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":621,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":622,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":623,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":624,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":625,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":626,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":627,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":628,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":629,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":630,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":631,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":632,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":633,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":634,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":635,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":636,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":637,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":638,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":639,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":640,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":641,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":642,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":643,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":644,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":645,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":646,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":647,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":648,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":649,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":650,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":651,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":652,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":653,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":654,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":655,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":656,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":657,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":658,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":659,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":660,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":661,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":662,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":663,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":664,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":665,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":666,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":667,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":668,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":669,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":670,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":671,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":672,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":673,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":674,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":675,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":676,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":677,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":678,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":679,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":680,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":681,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":682,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":683,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":684,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":685,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":686,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":687,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":688,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":689,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":690,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":691,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":692,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":693,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":694,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":695,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":696,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":697,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":698,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":699,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":700,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":701,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":702,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":703,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":704,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":705,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":706,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":707,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":708,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":709,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":710,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":711,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":712,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":713,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":714,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":715,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":716,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":717,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":718,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":719,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":720,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":721,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":722,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":723,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":724,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":725,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":726,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":727,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":728,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":729,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":730,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":731,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":732,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":733,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":734,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":735,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":736,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":737,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":738,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":739,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":740,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":741,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":742,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":743,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":744,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":745,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":746,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":747,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":748,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":749,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":750,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":751,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":752,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":753,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":754,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":755,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":756,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":757,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":758,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":759,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":760,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":761,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":762,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":763,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":764,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":765,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":766,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":767,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":768,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":769,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":770,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":771,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":772,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":773,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":774,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":775,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":776,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":777,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":778,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":779,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":780,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":781,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":782,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":783,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":784,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":785,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":786,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":787,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":788,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":789,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":790,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":791,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":792,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":793,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":794,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":795,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":796,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":797,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":798,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":799,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":800,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":801,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":802,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":803,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":804,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":805,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":806,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":807,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":808,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":809,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":810,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":811,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":812,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":813,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":814,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":815,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":816,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":817,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":818,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":819,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":820,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":821,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":822,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":823,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":824,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":825,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":826,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":827,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":828,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":829,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":830,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":831,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":832,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":833,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":834,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":835,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":836,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":837,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":838,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":839,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":840,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":841,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":842,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":843,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":844,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":845,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":846,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":847,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":848,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":849,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":850,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":851,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":852,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":853,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":854,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":855,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":856,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":857,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":858,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":859,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":860,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":861,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":862,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":863,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":864,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":865,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":866,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":867,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":868,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":869,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":870,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":871,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":872,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":873,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":874,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":875,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":876,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":877,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":878,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":879,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":880,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":881,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":882,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":883,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":884,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":885,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":886,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":887,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":888,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":889,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":890,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":891,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":892,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":893,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":894,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":895,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":896,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":897,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":898,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":899,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":900,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":901,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":902,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":903,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":904,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":905,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":906,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":907,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":908,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":909,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":910,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":911,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":912,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":913,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":914,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":915,"column":0},"generated":{"line":916,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":916,"column":0},"generated":{"line":917,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":917,"column":0},"generated":{"line":918,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":918,"column":0},"generated":{"line":919,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":919,"column":0},"generated":{"line":920,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":920,"column":0},"generated":{"line":921,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":921,"column":0},"generated":{"line":922,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":922,"column":0},"generated":{"line":923,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":923,"column":0},"generated":{"line":924,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":924,"column":0},"generated":{"line":925,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":925,"column":0},"generated":{"line":926,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":926,"column":0},"generated":{"line":927,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":927,"column":0},"generated":{"line":928,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":928,"column":0},"generated":{"line":929,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":929,"column":0},"generated":{"line":930,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":930,"column":0},"generated":{"line":931,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":931,"column":0},"generated":{"line":932,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":932,"column":0},"generated":{"line":933,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":933,"column":0},"generated":{"line":934,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":934,"column":0},"generated":{"line":935,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":935,"column":0},"generated":{"line":936,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":936,"column":0},"generated":{"line":937,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":937,"column":0},"generated":{"line":938,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":938,"column":0},"generated":{"line":939,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":939,"column":0},"generated":{"line":940,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":940,"column":0},"generated":{"line":941,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":941,"column":0},"generated":{"line":942,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":942,"column":0},"generated":{"line":943,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":943,"column":0},"generated":{"line":944,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":944,"column":0},"generated":{"line":945,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":945,"column":0},"generated":{"line":946,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":946,"column":0},"generated":{"line":947,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":947,"column":0},"generated":{"line":948,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":948,"column":0},"generated":{"line":949,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":949,"column":0},"generated":{"line":950,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":950,"column":0},"generated":{"line":951,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":951,"column":0},"generated":{"line":952,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":952,"column":0},"generated":{"line":953,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":953,"column":0},"generated":{"line":954,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":954,"column":0},"generated":{"line":955,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":955,"column":0},"generated":{"line":956,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":956,"column":0},"generated":{"line":957,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":957,"column":0},"generated":{"line":958,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":958,"column":0},"generated":{"line":959,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":959,"column":0},"generated":{"line":960,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":960,"column":0},"generated":{"line":961,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":961,"column":0},"generated":{"line":962,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":962,"column":0},"generated":{"line":963,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":963,"column":0},"generated":{"line":964,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":964,"column":0},"generated":{"line":965,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":965,"column":0},"generated":{"line":966,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":966,"column":0},"generated":{"line":967,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":967,"column":0},"generated":{"line":968,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":968,"column":0},"generated":{"line":969,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":969,"column":0},"generated":{"line":970,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":970,"column":0},"generated":{"line":971,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":971,"column":0},"generated":{"line":972,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":972,"column":0},"generated":{"line":973,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":973,"column":0},"generated":{"line":974,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":974,"column":0},"generated":{"line":975,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":975,"column":0},"generated":{"line":976,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":976,"column":0},"generated":{"line":977,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":977,"column":0},"generated":{"line":978,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":978,"column":0},"generated":{"line":979,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":979,"column":0},"generated":{"line":980,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":980,"column":0},"generated":{"line":981,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":981,"column":0},"generated":{"line":982,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":982,"column":0},"generated":{"line":983,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":983,"column":0},"generated":{"line":984,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":984,"column":0},"generated":{"line":985,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":985,"column":0},"generated":{"line":986,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":986,"column":0},"generated":{"line":987,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":987,"column":0},"generated":{"line":988,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":988,"column":0},"generated":{"line":989,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":989,"column":0},"generated":{"line":990,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":990,"column":0},"generated":{"line":991,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":991,"column":0},"generated":{"line":992,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":992,"column":0},"generated":{"line":993,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":993,"column":0},"generated":{"line":994,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":994,"column":0},"generated":{"line":995,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":995,"column":0},"generated":{"line":996,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":996,"column":0},"generated":{"line":997,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":997,"column":0},"generated":{"line":998,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":998,"column":0},"generated":{"line":999,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":999,"column":0},"generated":{"line":1000,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1000,"column":0},"generated":{"line":1001,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1001,"column":0},"generated":{"line":1002,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1002,"column":0},"generated":{"line":1003,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1003,"column":0},"generated":{"line":1004,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1004,"column":0},"generated":{"line":1005,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1005,"column":0},"generated":{"line":1006,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1006,"column":0},"generated":{"line":1007,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1007,"column":0},"generated":{"line":1008,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1008,"column":0},"generated":{"line":1009,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1009,"column":0},"generated":{"line":1010,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1010,"column":0},"generated":{"line":1011,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1011,"column":0},"generated":{"line":1012,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1012,"column":0},"generated":{"line":1013,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1013,"column":0},"generated":{"line":1014,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1014,"column":0},"generated":{"line":1015,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1015,"column":0},"generated":{"line":1016,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1016,"column":0},"generated":{"line":1017,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1017,"column":0},"generated":{"line":1018,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1018,"column":0},"generated":{"line":1019,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1019,"column":0},"generated":{"line":1020,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1020,"column":0},"generated":{"line":1021,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1021,"column":0},"generated":{"line":1022,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1022,"column":0},"generated":{"line":1023,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1023,"column":0},"generated":{"line":1024,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1024,"column":0},"generated":{"line":1025,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1025,"column":0},"generated":{"line":1026,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1026,"column":0},"generated":{"line":1027,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1027,"column":0},"generated":{"line":1028,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1028,"column":0},"generated":{"line":1029,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1029,"column":0},"generated":{"line":1030,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1030,"column":0},"generated":{"line":1031,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1031,"column":0},"generated":{"line":1032,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1032,"column":0},"generated":{"line":1033,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1033,"column":0},"generated":{"line":1034,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1034,"column":0},"generated":{"line":1035,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1035,"column":0},"generated":{"line":1036,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1036,"column":0},"generated":{"line":1037,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1037,"column":0},"generated":{"line":1038,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1038,"column":0},"generated":{"line":1039,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1039,"column":0},"generated":{"line":1040,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1040,"column":0},"generated":{"line":1041,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1041,"column":0},"generated":{"line":1042,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1042,"column":0},"generated":{"line":1043,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1043,"column":0},"generated":{"line":1044,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1044,"column":0},"generated":{"line":1045,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1045,"column":0},"generated":{"line":1046,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1046,"column":0},"generated":{"line":1047,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1047,"column":0},"generated":{"line":1048,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1048,"column":0},"generated":{"line":1049,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1049,"column":0},"generated":{"line":1050,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1050,"column":0},"generated":{"line":1051,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1051,"column":0},"generated":{"line":1052,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1052,"column":0},"generated":{"line":1053,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1053,"column":0},"generated":{"line":1054,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1054,"column":0},"generated":{"line":1055,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1055,"column":0},"generated":{"line":1056,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1056,"column":0},"generated":{"line":1057,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1057,"column":0},"generated":{"line":1058,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1058,"column":0},"generated":{"line":1059,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1059,"column":0},"generated":{"line":1060,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1060,"column":0},"generated":{"line":1061,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1061,"column":0},"generated":{"line":1062,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1062,"column":0},"generated":{"line":1063,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1063,"column":0},"generated":{"line":1064,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1064,"column":0},"generated":{"line":1065,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1065,"column":0},"generated":{"line":1066,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1066,"column":0},"generated":{"line":1067,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1067,"column":0},"generated":{"line":1068,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1068,"column":0},"generated":{"line":1069,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1069,"column":0},"generated":{"line":1070,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1070,"column":0},"generated":{"line":1071,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1071,"column":0},"generated":{"line":1072,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1072,"column":0},"generated":{"line":1073,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1073,"column":0},"generated":{"line":1074,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1074,"column":0},"generated":{"line":1075,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1075,"column":0},"generated":{"line":1076,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1076,"column":0},"generated":{"line":1077,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1077,"column":0},"generated":{"line":1078,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1078,"column":0},"generated":{"line":1079,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1079,"column":0},"generated":{"line":1080,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1080,"column":0},"generated":{"line":1081,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1081,"column":0},"generated":{"line":1082,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1082,"column":0},"generated":{"line":1083,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1083,"column":0},"generated":{"line":1084,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1084,"column":0},"generated":{"line":1085,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1085,"column":0},"generated":{"line":1086,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1086,"column":0},"generated":{"line":1087,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1087,"column":0},"generated":{"line":1088,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1088,"column":0},"generated":{"line":1089,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1089,"column":0},"generated":{"line":1090,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1090,"column":0},"generated":{"line":1091,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1091,"column":0},"generated":{"line":1092,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1092,"column":0},"generated":{"line":1093,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1093,"column":0},"generated":{"line":1094,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1094,"column":0},"generated":{"line":1095,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1095,"column":0},"generated":{"line":1096,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1096,"column":0},"generated":{"line":1097,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1097,"column":0},"generated":{"line":1098,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1098,"column":0},"generated":{"line":1099,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1099,"column":0},"generated":{"line":1100,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1100,"column":0},"generated":{"line":1101,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1101,"column":0},"generated":{"line":1102,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1102,"column":0},"generated":{"line":1103,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1103,"column":0},"generated":{"line":1104,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1104,"column":0},"generated":{"line":1105,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1105,"column":0},"generated":{"line":1106,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1106,"column":0},"generated":{"line":1107,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1107,"column":0},"generated":{"line":1108,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1108,"column":0},"generated":{"line":1109,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1109,"column":0},"generated":{"line":1110,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1110,"column":0},"generated":{"line":1111,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1111,"column":0},"generated":{"line":1112,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1112,"column":0},"generated":{"line":1113,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1113,"column":0},"generated":{"line":1114,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1114,"column":0},"generated":{"line":1115,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1115,"column":0},"generated":{"line":1116,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1116,"column":0},"generated":{"line":1117,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1117,"column":0},"generated":{"line":1118,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1118,"column":0},"generated":{"line":1119,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1119,"column":0},"generated":{"line":1120,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1120,"column":0},"generated":{"line":1121,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1121,"column":0},"generated":{"line":1122,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1122,"column":0},"generated":{"line":1123,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1123,"column":0},"generated":{"line":1124,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1124,"column":0},"generated":{"line":1125,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1125,"column":0},"generated":{"line":1126,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1126,"column":0},"generated":{"line":1127,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1127,"column":0},"generated":{"line":1128,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1128,"column":0},"generated":{"line":1129,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1129,"column":0},"generated":{"line":1130,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1130,"column":0},"generated":{"line":1131,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1131,"column":0},"generated":{"line":1132,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1132,"column":0},"generated":{"line":1133,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1133,"column":0},"generated":{"line":1134,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1134,"column":0},"generated":{"line":1135,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1135,"column":0},"generated":{"line":1136,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1136,"column":0},"generated":{"line":1137,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1137,"column":0},"generated":{"line":1138,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1138,"column":0},"generated":{"line":1139,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1139,"column":0},"generated":{"line":1140,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1140,"column":0},"generated":{"line":1141,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1141,"column":0},"generated":{"line":1142,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1142,"column":0},"generated":{"line":1143,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1143,"column":0},"generated":{"line":1144,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1144,"column":0},"generated":{"line":1145,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1145,"column":0},"generated":{"line":1146,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1146,"column":0},"generated":{"line":1147,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1147,"column":0},"generated":{"line":1148,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1148,"column":0},"generated":{"line":1149,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1149,"column":0},"generated":{"line":1150,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1150,"column":0},"generated":{"line":1151,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1151,"column":0},"generated":{"line":1152,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1152,"column":0},"generated":{"line":1153,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1153,"column":0},"generated":{"line":1154,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1154,"column":0},"generated":{"line":1155,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1155,"column":0},"generated":{"line":1156,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1156,"column":0},"generated":{"line":1157,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1157,"column":0},"generated":{"line":1158,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1158,"column":0},"generated":{"line":1159,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1159,"column":0},"generated":{"line":1160,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1160,"column":0},"generated":{"line":1161,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1161,"column":0},"generated":{"line":1162,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1162,"column":0},"generated":{"line":1163,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1163,"column":0},"generated":{"line":1164,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1164,"column":0},"generated":{"line":1165,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1165,"column":0},"generated":{"line":1166,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1166,"column":0},"generated":{"line":1167,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1167,"column":0},"generated":{"line":1168,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1168,"column":0},"generated":{"line":1169,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1169,"column":0},"generated":{"line":1170,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1170,"column":0},"generated":{"line":1171,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1171,"column":0},"generated":{"line":1172,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1172,"column":0},"generated":{"line":1173,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1173,"column":0},"generated":{"line":1174,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1174,"column":0},"generated":{"line":1175,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1175,"column":0},"generated":{"line":1176,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1176,"column":0},"generated":{"line":1177,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1177,"column":0},"generated":{"line":1178,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1178,"column":0},"generated":{"line":1179,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1179,"column":0},"generated":{"line":1180,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1180,"column":0},"generated":{"line":1181,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1181,"column":0},"generated":{"line":1182,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1182,"column":0},"generated":{"line":1183,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1183,"column":0},"generated":{"line":1184,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1184,"column":0},"generated":{"line":1185,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1185,"column":0},"generated":{"line":1186,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1186,"column":0},"generated":{"line":1187,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1187,"column":0},"generated":{"line":1188,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1188,"column":0},"generated":{"line":1189,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1189,"column":0},"generated":{"line":1190,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1190,"column":0},"generated":{"line":1191,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1191,"column":0},"generated":{"line":1192,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1192,"column":0},"generated":{"line":1193,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1193,"column":0},"generated":{"line":1194,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1194,"column":0},"generated":{"line":1195,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1195,"column":0},"generated":{"line":1196,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1196,"column":0},"generated":{"line":1197,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1197,"column":0},"generated":{"line":1198,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1198,"column":0},"generated":{"line":1199,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1199,"column":0},"generated":{"line":1200,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1200,"column":0},"generated":{"line":1201,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1201,"column":0},"generated":{"line":1202,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1202,"column":0},"generated":{"line":1203,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1203,"column":0},"generated":{"line":1204,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1204,"column":0},"generated":{"line":1205,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1205,"column":0},"generated":{"line":1206,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1206,"column":0},"generated":{"line":1207,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1207,"column":0},"generated":{"line":1208,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1208,"column":0},"generated":{"line":1209,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1209,"column":0},"generated":{"line":1210,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1210,"column":0},"generated":{"line":1211,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1211,"column":0},"generated":{"line":1212,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1212,"column":0},"generated":{"line":1213,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1213,"column":0},"generated":{"line":1214,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1214,"column":0},"generated":{"line":1215,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1215,"column":0},"generated":{"line":1216,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1216,"column":0},"generated":{"line":1217,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1217,"column":0},"generated":{"line":1218,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1218,"column":0},"generated":{"line":1219,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1219,"column":0},"generated":{"line":1220,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1220,"column":0},"generated":{"line":1221,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1221,"column":0},"generated":{"line":1222,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1222,"column":0},"generated":{"line":1223,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1223,"column":0},"generated":{"line":1224,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1224,"column":0},"generated":{"line":1225,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1225,"column":0},"generated":{"line":1226,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1226,"column":0},"generated":{"line":1227,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1227,"column":0},"generated":{"line":1228,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1228,"column":0},"generated":{"line":1229,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1229,"column":0},"generated":{"line":1230,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1230,"column":0},"generated":{"line":1231,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1231,"column":0},"generated":{"line":1232,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1232,"column":0},"generated":{"line":1233,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1233,"column":0},"generated":{"line":1234,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1234,"column":0},"generated":{"line":1235,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1235,"column":0},"generated":{"line":1236,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1236,"column":0},"generated":{"line":1237,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1237,"column":0},"generated":{"line":1238,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1238,"column":0},"generated":{"line":1239,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1239,"column":0},"generated":{"line":1240,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1240,"column":0},"generated":{"line":1241,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1241,"column":0},"generated":{"line":1242,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1242,"column":0},"generated":{"line":1243,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1243,"column":0},"generated":{"line":1244,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1244,"column":0},"generated":{"line":1245,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1245,"column":0},"generated":{"line":1246,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1246,"column":0},"generated":{"line":1247,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1247,"column":0},"generated":{"line":1248,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1248,"column":0},"generated":{"line":1249,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1249,"column":0},"generated":{"line":1250,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1250,"column":0},"generated":{"line":1251,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1251,"column":0},"generated":{"line":1252,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1252,"column":0},"generated":{"line":1253,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1253,"column":0},"generated":{"line":1254,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1254,"column":0},"generated":{"line":1255,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1255,"column":0},"generated":{"line":1256,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1256,"column":0},"generated":{"line":1257,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1257,"column":0},"generated":{"line":1258,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1258,"column":0},"generated":{"line":1259,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1259,"column":0},"generated":{"line":1260,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1260,"column":0},"generated":{"line":1261,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1261,"column":0},"generated":{"line":1262,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1262,"column":0},"generated":{"line":1263,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1263,"column":0},"generated":{"line":1264,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1264,"column":0},"generated":{"line":1265,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1265,"column":0},"generated":{"line":1266,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1266,"column":0},"generated":{"line":1267,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1267,"column":0},"generated":{"line":1268,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1268,"column":0},"generated":{"line":1269,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1269,"column":0},"generated":{"line":1270,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1270,"column":0},"generated":{"line":1271,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1271,"column":0},"generated":{"line":1272,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1272,"column":0},"generated":{"line":1273,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1273,"column":0},"generated":{"line":1274,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1274,"column":0},"generated":{"line":1275,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1275,"column":0},"generated":{"line":1276,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1276,"column":0},"generated":{"line":1277,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1277,"column":0},"generated":{"line":1278,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1278,"column":0},"generated":{"line":1279,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1279,"column":0},"generated":{"line":1280,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1280,"column":0},"generated":{"line":1281,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1281,"column":0},"generated":{"line":1282,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1282,"column":0},"generated":{"line":1283,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1283,"column":0},"generated":{"line":1284,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1284,"column":0},"generated":{"line":1285,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1285,"column":0},"generated":{"line":1286,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1286,"column":0},"generated":{"line":1287,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1287,"column":0},"generated":{"line":1288,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1288,"column":0},"generated":{"line":1289,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1289,"column":0},"generated":{"line":1290,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1290,"column":0},"generated":{"line":1291,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1291,"column":0},"generated":{"line":1292,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1292,"column":0},"generated":{"line":1293,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1293,"column":0},"generated":{"line":1294,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1294,"column":0},"generated":{"line":1295,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1295,"column":0},"generated":{"line":1296,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1296,"column":0},"generated":{"line":1297,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1297,"column":0},"generated":{"line":1298,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1298,"column":0},"generated":{"line":1299,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1299,"column":0},"generated":{"line":1300,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1300,"column":0},"generated":{"line":1301,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1301,"column":0},"generated":{"line":1302,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1302,"column":0},"generated":{"line":1303,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1303,"column":0},"generated":{"line":1304,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1304,"column":0},"generated":{"line":1305,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1305,"column":0},"generated":{"line":1306,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1306,"column":0},"generated":{"line":1307,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1307,"column":0},"generated":{"line":1308,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1308,"column":0},"generated":{"line":1309,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1309,"column":0},"generated":{"line":1310,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1310,"column":0},"generated":{"line":1311,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1311,"column":0},"generated":{"line":1312,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1312,"column":0},"generated":{"line":1313,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1313,"column":0},"generated":{"line":1314,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1314,"column":0},"generated":{"line":1315,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1315,"column":0},"generated":{"line":1316,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1316,"column":0},"generated":{"line":1317,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1317,"column":0},"generated":{"line":1318,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1318,"column":0},"generated":{"line":1319,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1319,"column":0},"generated":{"line":1320,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1320,"column":0},"generated":{"line":1321,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1321,"column":0},"generated":{"line":1322,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1322,"column":0},"generated":{"line":1323,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1323,"column":0},"generated":{"line":1324,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1324,"column":0},"generated":{"line":1325,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1325,"column":0},"generated":{"line":1326,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1326,"column":0},"generated":{"line":1327,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1327,"column":0},"generated":{"line":1328,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1328,"column":0},"generated":{"line":1329,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1329,"column":0},"generated":{"line":1330,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1330,"column":0},"generated":{"line":1331,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1331,"column":0},"generated":{"line":1332,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1332,"column":0},"generated":{"line":1333,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1333,"column":0},"generated":{"line":1334,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1334,"column":0},"generated":{"line":1335,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1335,"column":0},"generated":{"line":1336,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1336,"column":0},"generated":{"line":1337,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1337,"column":0},"generated":{"line":1338,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1338,"column":0},"generated":{"line":1339,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1339,"column":0},"generated":{"line":1340,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1340,"column":0},"generated":{"line":1341,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1341,"column":0},"generated":{"line":1342,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1342,"column":0},"generated":{"line":1343,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1343,"column":0},"generated":{"line":1344,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1344,"column":0},"generated":{"line":1345,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1345,"column":0},"generated":{"line":1346,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1346,"column":0},"generated":{"line":1347,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1347,"column":0},"generated":{"line":1348,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1348,"column":0},"generated":{"line":1349,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1349,"column":0},"generated":{"line":1350,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1350,"column":0},"generated":{"line":1351,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1351,"column":0},"generated":{"line":1352,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1352,"column":0},"generated":{"line":1353,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1353,"column":0},"generated":{"line":1354,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1354,"column":0},"generated":{"line":1355,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1355,"column":0},"generated":{"line":1356,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1356,"column":0},"generated":{"line":1357,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1357,"column":0},"generated":{"line":1358,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1358,"column":0},"generated":{"line":1359,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1359,"column":0},"generated":{"line":1360,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1360,"column":0},"generated":{"line":1361,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1361,"column":0},"generated":{"line":1362,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1362,"column":0},"generated":{"line":1363,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1363,"column":0},"generated":{"line":1364,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1364,"column":0},"generated":{"line":1365,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1365,"column":0},"generated":{"line":1366,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1366,"column":0},"generated":{"line":1367,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1367,"column":0},"generated":{"line":1368,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1368,"column":0},"generated":{"line":1369,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1369,"column":0},"generated":{"line":1370,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1370,"column":0},"generated":{"line":1371,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1371,"column":0},"generated":{"line":1372,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1372,"column":0},"generated":{"line":1373,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1373,"column":0},"generated":{"line":1374,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1374,"column":0},"generated":{"line":1375,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1375,"column":0},"generated":{"line":1376,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1376,"column":0},"generated":{"line":1377,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1377,"column":0},"generated":{"line":1378,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1378,"column":0},"generated":{"line":1379,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1379,"column":0},"generated":{"line":1380,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1380,"column":0},"generated":{"line":1381,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1381,"column":0},"generated":{"line":1382,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1382,"column":0},"generated":{"line":1383,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1383,"column":0},"generated":{"line":1384,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1384,"column":0},"generated":{"line":1385,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1385,"column":0},"generated":{"line":1386,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1386,"column":0},"generated":{"line":1387,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1387,"column":0},"generated":{"line":1388,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1388,"column":0},"generated":{"line":1389,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1389,"column":0},"generated":{"line":1390,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1390,"column":0},"generated":{"line":1391,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1391,"column":0},"generated":{"line":1392,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1392,"column":0},"generated":{"line":1393,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1393,"column":0},"generated":{"line":1394,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1394,"column":0},"generated":{"line":1395,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1395,"column":0},"generated":{"line":1396,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1396,"column":0},"generated":{"line":1397,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1397,"column":0},"generated":{"line":1398,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1398,"column":0},"generated":{"line":1399,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1399,"column":0},"generated":{"line":1400,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1400,"column":0},"generated":{"line":1401,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1401,"column":0},"generated":{"line":1402,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1402,"column":0},"generated":{"line":1403,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1403,"column":0},"generated":{"line":1404,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1404,"column":0},"generated":{"line":1405,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1405,"column":0},"generated":{"line":1406,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1406,"column":0},"generated":{"line":1407,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1407,"column":0},"generated":{"line":1408,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1408,"column":0},"generated":{"line":1409,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1409,"column":0},"generated":{"line":1410,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1410,"column":0},"generated":{"line":1411,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1411,"column":0},"generated":{"line":1412,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1412,"column":0},"generated":{"line":1413,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1413,"column":0},"generated":{"line":1414,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1414,"column":0},"generated":{"line":1415,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1415,"column":0},"generated":{"line":1416,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1416,"column":0},"generated":{"line":1417,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1417,"column":0},"generated":{"line":1418,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1418,"column":0},"generated":{"line":1419,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1419,"column":0},"generated":{"line":1420,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1420,"column":0},"generated":{"line":1421,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1421,"column":0},"generated":{"line":1422,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1422,"column":0},"generated":{"line":1423,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1423,"column":0},"generated":{"line":1424,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1424,"column":0},"generated":{"line":1425,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1425,"column":0},"generated":{"line":1426,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1426,"column":0},"generated":{"line":1427,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1427,"column":0},"generated":{"line":1428,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1428,"column":0},"generated":{"line":1429,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1429,"column":0},"generated":{"line":1430,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1430,"column":0},"generated":{"line":1431,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1431,"column":0},"generated":{"line":1432,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1432,"column":0},"generated":{"line":1433,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1433,"column":0},"generated":{"line":1434,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1434,"column":0},"generated":{"line":1435,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1435,"column":0},"generated":{"line":1436,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1436,"column":0},"generated":{"line":1437,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1437,"column":0},"generated":{"line":1438,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1438,"column":0},"generated":{"line":1439,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1439,"column":0},"generated":{"line":1440,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1440,"column":0},"generated":{"line":1441,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1441,"column":0},"generated":{"line":1442,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1442,"column":0},"generated":{"line":1443,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1443,"column":0},"generated":{"line":1444,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1444,"column":0},"generated":{"line":1445,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1445,"column":0},"generated":{"line":1446,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1446,"column":0},"generated":{"line":1447,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1447,"column":0},"generated":{"line":1448,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1448,"column":0},"generated":{"line":1449,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1449,"column":0},"generated":{"line":1450,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1450,"column":0},"generated":{"line":1451,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1451,"column":0},"generated":{"line":1452,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1452,"column":0},"generated":{"line":1453,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1453,"column":0},"generated":{"line":1454,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1454,"column":0},"generated":{"line":1455,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1455,"column":0},"generated":{"line":1456,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1456,"column":0},"generated":{"line":1457,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1457,"column":0},"generated":{"line":1458,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1458,"column":0},"generated":{"line":1459,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1459,"column":0},"generated":{"line":1460,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1460,"column":0},"generated":{"line":1461,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1461,"column":0},"generated":{"line":1462,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1462,"column":0},"generated":{"line":1463,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1463,"column":0},"generated":{"line":1464,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1464,"column":0},"generated":{"line":1465,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1465,"column":0},"generated":{"line":1466,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1466,"column":0},"generated":{"line":1467,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1467,"column":0},"generated":{"line":1468,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1468,"column":0},"generated":{"line":1469,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1469,"column":0},"generated":{"line":1470,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1470,"column":0},"generated":{"line":1471,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1471,"column":0},"generated":{"line":1472,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1472,"column":0},"generated":{"line":1473,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1473,"column":0},"generated":{"line":1474,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1474,"column":0},"generated":{"line":1475,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1475,"column":0},"generated":{"line":1476,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1476,"column":0},"generated":{"line":1477,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1477,"column":0},"generated":{"line":1478,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1478,"column":0},"generated":{"line":1479,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1479,"column":0},"generated":{"line":1480,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1480,"column":0},"generated":{"line":1481,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1481,"column":0},"generated":{"line":1482,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1482,"column":0},"generated":{"line":1483,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1483,"column":0},"generated":{"line":1484,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1484,"column":0},"generated":{"line":1485,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1485,"column":0},"generated":{"line":1486,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1486,"column":0},"generated":{"line":1487,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1487,"column":0},"generated":{"line":1488,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1488,"column":0},"generated":{"line":1489,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1489,"column":0},"generated":{"line":1490,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1490,"column":0},"generated":{"line":1491,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1491,"column":0},"generated":{"line":1492,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1492,"column":0},"generated":{"line":1493,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1493,"column":0},"generated":{"line":1494,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1494,"column":0},"generated":{"line":1495,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1495,"column":0},"generated":{"line":1496,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1496,"column":0},"generated":{"line":1497,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1497,"column":0},"generated":{"line":1498,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1498,"column":0},"generated":{"line":1499,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1499,"column":0},"generated":{"line":1500,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1500,"column":0},"generated":{"line":1501,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1501,"column":0},"generated":{"line":1502,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1502,"column":0},"generated":{"line":1503,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1503,"column":0},"generated":{"line":1504,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1504,"column":0},"generated":{"line":1505,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1505,"column":0},"generated":{"line":1506,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1506,"column":0},"generated":{"line":1507,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1507,"column":0},"generated":{"line":1508,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1508,"column":0},"generated":{"line":1509,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1509,"column":0},"generated":{"line":1510,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1510,"column":0},"generated":{"line":1511,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1511,"column":0},"generated":{"line":1512,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1512,"column":0},"generated":{"line":1513,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1513,"column":0},"generated":{"line":1514,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1514,"column":0},"generated":{"line":1515,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1515,"column":0},"generated":{"line":1516,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1516,"column":0},"generated":{"line":1517,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1517,"column":0},"generated":{"line":1518,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1518,"column":0},"generated":{"line":1519,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1519,"column":0},"generated":{"line":1520,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1520,"column":0},"generated":{"line":1521,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1521,"column":0},"generated":{"line":1522,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1522,"column":0},"generated":{"line":1523,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1523,"column":0},"generated":{"line":1524,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1524,"column":0},"generated":{"line":1525,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1525,"column":0},"generated":{"line":1526,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1526,"column":0},"generated":{"line":1527,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1527,"column":0},"generated":{"line":1528,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1528,"column":0},"generated":{"line":1529,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1529,"column":0},"generated":{"line":1530,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1530,"column":0},"generated":{"line":1531,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1531,"column":0},"generated":{"line":1532,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1532,"column":0},"generated":{"line":1533,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1533,"column":0},"generated":{"line":1534,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1534,"column":0},"generated":{"line":1535,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1535,"column":0},"generated":{"line":1536,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1536,"column":0},"generated":{"line":1537,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1537,"column":0},"generated":{"line":1538,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1538,"column":0},"generated":{"line":1539,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1539,"column":0},"generated":{"line":1540,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1540,"column":0},"generated":{"line":1541,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1541,"column":0},"generated":{"line":1542,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1542,"column":0},"generated":{"line":1543,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1543,"column":0},"generated":{"line":1544,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1544,"column":0},"generated":{"line":1545,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1545,"column":0},"generated":{"line":1546,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1546,"column":0},"generated":{"line":1547,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1547,"column":0},"generated":{"line":1548,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1548,"column":0},"generated":{"line":1549,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1549,"column":0},"generated":{"line":1550,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1550,"column":0},"generated":{"line":1551,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1551,"column":0},"generated":{"line":1552,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1552,"column":0},"generated":{"line":1553,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1553,"column":0},"generated":{"line":1554,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1554,"column":0},"generated":{"line":1555,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1555,"column":0},"generated":{"line":1556,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1556,"column":0},"generated":{"line":1557,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1557,"column":0},"generated":{"line":1558,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1558,"column":0},"generated":{"line":1559,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1559,"column":0},"generated":{"line":1560,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1560,"column":0},"generated":{"line":1561,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1561,"column":0},"generated":{"line":1562,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1562,"column":0},"generated":{"line":1563,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1563,"column":0},"generated":{"line":1564,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1564,"column":0},"generated":{"line":1565,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1565,"column":0},"generated":{"line":1566,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1566,"column":0},"generated":{"line":1567,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1567,"column":0},"generated":{"line":1568,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1568,"column":0},"generated":{"line":1569,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1569,"column":0},"generated":{"line":1570,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1570,"column":0},"generated":{"line":1571,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1571,"column":0},"generated":{"line":1572,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1572,"column":0},"generated":{"line":1573,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1573,"column":0},"generated":{"line":1574,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1574,"column":0},"generated":{"line":1575,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1575,"column":0},"generated":{"line":1576,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1576,"column":0},"generated":{"line":1577,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1577,"column":0},"generated":{"line":1578,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1578,"column":0},"generated":{"line":1579,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1579,"column":0},"generated":{"line":1580,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1580,"column":0},"generated":{"line":1581,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1581,"column":0},"generated":{"line":1582,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1582,"column":0},"generated":{"line":1583,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1583,"column":0},"generated":{"line":1584,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1584,"column":0},"generated":{"line":1585,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1585,"column":0},"generated":{"line":1586,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1586,"column":0},"generated":{"line":1587,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1587,"column":0},"generated":{"line":1588,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1588,"column":0},"generated":{"line":1589,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1589,"column":0},"generated":{"line":1590,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1590,"column":0},"generated":{"line":1591,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1591,"column":0},"generated":{"line":1592,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1592,"column":0},"generated":{"line":1593,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1593,"column":0},"generated":{"line":1594,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1594,"column":0},"generated":{"line":1595,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1595,"column":0},"generated":{"line":1596,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1596,"column":0},"generated":{"line":1597,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1597,"column":0},"generated":{"line":1598,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1598,"column":0},"generated":{"line":1599,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1599,"column":0},"generated":{"line":1600,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1600,"column":0},"generated":{"line":1601,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1601,"column":0},"generated":{"line":1602,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1602,"column":0},"generated":{"line":1603,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1603,"column":0},"generated":{"line":1604,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1604,"column":0},"generated":{"line":1605,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1605,"column":0},"generated":{"line":1606,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1606,"column":0},"generated":{"line":1607,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1607,"column":0},"generated":{"line":1608,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1608,"column":0},"generated":{"line":1609,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1609,"column":0},"generated":{"line":1610,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1610,"column":0},"generated":{"line":1611,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1611,"column":0},"generated":{"line":1612,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1612,"column":0},"generated":{"line":1613,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1613,"column":0},"generated":{"line":1614,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1614,"column":0},"generated":{"line":1615,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1615,"column":0},"generated":{"line":1616,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1616,"column":0},"generated":{"line":1617,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1617,"column":0},"generated":{"line":1618,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1618,"column":0},"generated":{"line":1619,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1619,"column":0},"generated":{"line":1620,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1620,"column":0},"generated":{"line":1621,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1621,"column":0},"generated":{"line":1622,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1622,"column":0},"generated":{"line":1623,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1623,"column":0},"generated":{"line":1624,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1624,"column":0},"generated":{"line":1625,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1625,"column":0},"generated":{"line":1626,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1626,"column":0},"generated":{"line":1627,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1627,"column":0},"generated":{"line":1628,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1628,"column":0},"generated":{"line":1629,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1629,"column":0},"generated":{"line":1630,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1630,"column":0},"generated":{"line":1631,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1631,"column":0},"generated":{"line":1632,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1632,"column":0},"generated":{"line":1633,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1633,"column":0},"generated":{"line":1634,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1634,"column":0},"generated":{"line":1635,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1635,"column":0},"generated":{"line":1636,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1636,"column":0},"generated":{"line":1637,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1637,"column":0},"generated":{"line":1638,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1638,"column":0},"generated":{"line":1639,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1639,"column":0},"generated":{"line":1640,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1640,"column":0},"generated":{"line":1641,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1641,"column":0},"generated":{"line":1642,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1642,"column":0},"generated":{"line":1643,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1643,"column":0},"generated":{"line":1644,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1644,"column":0},"generated":{"line":1645,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1645,"column":0},"generated":{"line":1646,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1646,"column":0},"generated":{"line":1647,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1647,"column":0},"generated":{"line":1648,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1648,"column":0},"generated":{"line":1649,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1649,"column":0},"generated":{"line":1650,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1650,"column":0},"generated":{"line":1651,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1651,"column":0},"generated":{"line":1652,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1652,"column":0},"generated":{"line":1653,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1653,"column":0},"generated":{"line":1654,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1654,"column":0},"generated":{"line":1655,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1655,"column":0},"generated":{"line":1656,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1656,"column":0},"generated":{"line":1657,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1657,"column":0},"generated":{"line":1658,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1658,"column":0},"generated":{"line":1659,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1659,"column":0},"generated":{"line":1660,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1660,"column":0},"generated":{"line":1661,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1661,"column":0},"generated":{"line":1662,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1662,"column":0},"generated":{"line":1663,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1663,"column":0},"generated":{"line":1664,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1664,"column":0},"generated":{"line":1665,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1665,"column":0},"generated":{"line":1666,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1666,"column":0},"generated":{"line":1667,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1667,"column":0},"generated":{"line":1668,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1668,"column":0},"generated":{"line":1669,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1669,"column":0},"generated":{"line":1670,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1670,"column":0},"generated":{"line":1671,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1671,"column":0},"generated":{"line":1672,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1672,"column":0},"generated":{"line":1673,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1673,"column":0},"generated":{"line":1674,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1674,"column":0},"generated":{"line":1675,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1675,"column":0},"generated":{"line":1676,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1676,"column":0},"generated":{"line":1677,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1677,"column":0},"generated":{"line":1678,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1678,"column":0},"generated":{"line":1679,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1679,"column":0},"generated":{"line":1680,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1680,"column":0},"generated":{"line":1681,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1681,"column":0},"generated":{"line":1682,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1682,"column":0},"generated":{"line":1683,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1683,"column":0},"generated":{"line":1684,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1684,"column":0},"generated":{"line":1685,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1685,"column":0},"generated":{"line":1686,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1686,"column":0},"generated":{"line":1687,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1687,"column":0},"generated":{"line":1688,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1688,"column":0},"generated":{"line":1689,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1689,"column":0},"generated":{"line":1690,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1690,"column":0},"generated":{"line":1691,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1691,"column":0},"generated":{"line":1692,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1692,"column":0},"generated":{"line":1693,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1693,"column":0},"generated":{"line":1694,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1694,"column":0},"generated":{"line":1695,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1695,"column":0},"generated":{"line":1696,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1696,"column":0},"generated":{"line":1697,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1697,"column":0},"generated":{"line":1698,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1698,"column":0},"generated":{"line":1699,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1699,"column":0},"generated":{"line":1700,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1700,"column":0},"generated":{"line":1701,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1701,"column":0},"generated":{"line":1702,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1702,"column":0},"generated":{"line":1703,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1703,"column":0},"generated":{"line":1704,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1704,"column":0},"generated":{"line":1705,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1705,"column":0},"generated":{"line":1706,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1706,"column":0},"generated":{"line":1707,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1707,"column":0},"generated":{"line":1708,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1708,"column":0},"generated":{"line":1709,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1709,"column":0},"generated":{"line":1710,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1710,"column":0},"generated":{"line":1711,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1711,"column":0},"generated":{"line":1712,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1712,"column":0},"generated":{"line":1713,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1713,"column":0},"generated":{"line":1714,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1714,"column":0},"generated":{"line":1715,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1715,"column":0},"generated":{"line":1716,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1716,"column":0},"generated":{"line":1717,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1717,"column":0},"generated":{"line":1718,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1718,"column":0},"generated":{"line":1719,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1719,"column":0},"generated":{"line":1720,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1720,"column":0},"generated":{"line":1721,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1721,"column":0},"generated":{"line":1722,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1722,"column":0},"generated":{"line":1723,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1723,"column":0},"generated":{"line":1724,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1724,"column":0},"generated":{"line":1725,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1725,"column":0},"generated":{"line":1726,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1726,"column":0},"generated":{"line":1727,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1727,"column":0},"generated":{"line":1728,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1728,"column":0},"generated":{"line":1729,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1729,"column":0},"generated":{"line":1730,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1730,"column":0},"generated":{"line":1731,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1731,"column":0},"generated":{"line":1732,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1732,"column":0},"generated":{"line":1733,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1733,"column":0},"generated":{"line":1734,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1734,"column":0},"generated":{"line":1735,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1735,"column":0},"generated":{"line":1736,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1736,"column":0},"generated":{"line":1737,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1737,"column":0},"generated":{"line":1738,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1738,"column":0},"generated":{"line":1739,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1739,"column":0},"generated":{"line":1740,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1740,"column":0},"generated":{"line":1741,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1741,"column":0},"generated":{"line":1742,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1742,"column":0},"generated":{"line":1743,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1743,"column":0},"generated":{"line":1744,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1744,"column":0},"generated":{"line":1745,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1745,"column":0},"generated":{"line":1746,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1746,"column":0},"generated":{"line":1747,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1747,"column":0},"generated":{"line":1748,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1748,"column":0},"generated":{"line":1749,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1749,"column":0},"generated":{"line":1750,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1750,"column":0},"generated":{"line":1751,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1751,"column":0},"generated":{"line":1752,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1752,"column":0},"generated":{"line":1753,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1753,"column":0},"generated":{"line":1754,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1754,"column":0},"generated":{"line":1755,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1755,"column":0},"generated":{"line":1756,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1756,"column":0},"generated":{"line":1757,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1757,"column":0},"generated":{"line":1758,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1758,"column":0},"generated":{"line":1759,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1759,"column":0},"generated":{"line":1760,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1760,"column":0},"generated":{"line":1761,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1761,"column":0},"generated":{"line":1762,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1762,"column":0},"generated":{"line":1763,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1763,"column":0},"generated":{"line":1764,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1764,"column":0},"generated":{"line":1765,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1765,"column":0},"generated":{"line":1766,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1766,"column":0},"generated":{"line":1767,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1767,"column":0},"generated":{"line":1768,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1768,"column":0},"generated":{"line":1769,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1769,"column":0},"generated":{"line":1770,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1770,"column":0},"generated":{"line":1771,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1771,"column":0},"generated":{"line":1772,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1772,"column":0},"generated":{"line":1773,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1773,"column":0},"generated":{"line":1774,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1774,"column":0},"generated":{"line":1775,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1775,"column":0},"generated":{"line":1776,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1776,"column":0},"generated":{"line":1777,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1777,"column":0},"generated":{"line":1778,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1778,"column":0},"generated":{"line":1779,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1779,"column":0},"generated":{"line":1780,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1780,"column":0},"generated":{"line":1781,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1781,"column":0},"generated":{"line":1782,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1782,"column":0},"generated":{"line":1783,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1783,"column":0},"generated":{"line":1784,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1784,"column":0},"generated":{"line":1785,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1785,"column":0},"generated":{"line":1786,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1786,"column":0},"generated":{"line":1787,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1787,"column":0},"generated":{"line":1788,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1788,"column":0},"generated":{"line":1789,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1789,"column":0},"generated":{"line":1790,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1790,"column":0},"generated":{"line":1791,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1791,"column":0},"generated":{"line":1792,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1792,"column":0},"generated":{"line":1793,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1793,"column":0},"generated":{"line":1794,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1794,"column":0},"generated":{"line":1795,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1795,"column":0},"generated":{"line":1796,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1796,"column":0},"generated":{"line":1797,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1797,"column":0},"generated":{"line":1798,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1798,"column":0},"generated":{"line":1799,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1799,"column":0},"generated":{"line":1800,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1800,"column":0},"generated":{"line":1801,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1801,"column":0},"generated":{"line":1802,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1802,"column":0},"generated":{"line":1803,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1803,"column":0},"generated":{"line":1804,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1804,"column":0},"generated":{"line":1805,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1805,"column":0},"generated":{"line":1806,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1806,"column":0},"generated":{"line":1807,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1807,"column":0},"generated":{"line":1808,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1808,"column":0},"generated":{"line":1809,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1809,"column":0},"generated":{"line":1810,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1810,"column":0},"generated":{"line":1811,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1811,"column":0},"generated":{"line":1812,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1812,"column":0},"generated":{"line":1813,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1813,"column":0},"generated":{"line":1814,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1814,"column":0},"generated":{"line":1815,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1815,"column":0},"generated":{"line":1816,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1816,"column":0},"generated":{"line":1817,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1817,"column":0},"generated":{"line":1818,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1818,"column":0},"generated":{"line":1819,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1819,"column":0},"generated":{"line":1820,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1820,"column":0},"generated":{"line":1821,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1821,"column":0},"generated":{"line":1822,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1822,"column":0},"generated":{"line":1823,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1823,"column":0},"generated":{"line":1824,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1824,"column":0},"generated":{"line":1825,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1825,"column":0},"generated":{"line":1826,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1826,"column":0},"generated":{"line":1827,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1827,"column":0},"generated":{"line":1828,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1828,"column":0},"generated":{"line":1829,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1829,"column":0},"generated":{"line":1830,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1830,"column":0},"generated":{"line":1831,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1831,"column":0},"generated":{"line":1832,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1832,"column":0},"generated":{"line":1833,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1833,"column":0},"generated":{"line":1834,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1834,"column":0},"generated":{"line":1835,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1835,"column":0},"generated":{"line":1836,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1836,"column":0},"generated":{"line":1837,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1837,"column":0},"generated":{"line":1838,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1838,"column":0},"generated":{"line":1839,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1839,"column":0},"generated":{"line":1840,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1840,"column":0},"generated":{"line":1841,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1841,"column":0},"generated":{"line":1842,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1842,"column":0},"generated":{"line":1843,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1843,"column":0},"generated":{"line":1844,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1844,"column":0},"generated":{"line":1845,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1845,"column":0},"generated":{"line":1846,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1846,"column":0},"generated":{"line":1847,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1847,"column":0},"generated":{"line":1848,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1848,"column":0},"generated":{"line":1849,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1849,"column":0},"generated":{"line":1850,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1850,"column":0},"generated":{"line":1851,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1851,"column":0},"generated":{"line":1852,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1852,"column":0},"generated":{"line":1853,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1853,"column":0},"generated":{"line":1854,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1854,"column":0},"generated":{"line":1855,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1855,"column":0},"generated":{"line":1856,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1856,"column":0},"generated":{"line":1857,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1857,"column":0},"generated":{"line":1858,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1858,"column":0},"generated":{"line":1859,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1859,"column":0},"generated":{"line":1860,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1860,"column":0},"generated":{"line":1861,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1861,"column":0},"generated":{"line":1862,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1862,"column":0},"generated":{"line":1863,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1863,"column":0},"generated":{"line":1864,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1864,"column":0},"generated":{"line":1865,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1865,"column":0},"generated":{"line":1866,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1866,"column":0},"generated":{"line":1867,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1867,"column":0},"generated":{"line":1868,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1868,"column":0},"generated":{"line":1869,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1869,"column":0},"generated":{"line":1870,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1870,"column":0},"generated":{"line":1871,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1871,"column":0},"generated":{"line":1872,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1872,"column":0},"generated":{"line":1873,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1873,"column":0},"generated":{"line":1874,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1874,"column":0},"generated":{"line":1875,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1875,"column":0},"generated":{"line":1876,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1876,"column":0},"generated":{"line":1877,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1877,"column":0},"generated":{"line":1878,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1878,"column":0},"generated":{"line":1879,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1879,"column":0},"generated":{"line":1880,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1880,"column":0},"generated":{"line":1881,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1881,"column":0},"generated":{"line":1882,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1882,"column":0},"generated":{"line":1883,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1883,"column":0},"generated":{"line":1884,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1884,"column":0},"generated":{"line":1885,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1885,"column":0},"generated":{"line":1886,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1886,"column":0},"generated":{"line":1887,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1887,"column":0},"generated":{"line":1888,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1888,"column":0},"generated":{"line":1889,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1889,"column":0},"generated":{"line":1890,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1890,"column":0},"generated":{"line":1891,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1891,"column":0},"generated":{"line":1892,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1892,"column":0},"generated":{"line":1893,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1893,"column":0},"generated":{"line":1894,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1894,"column":0},"generated":{"line":1895,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1895,"column":0},"generated":{"line":1896,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1896,"column":0},"generated":{"line":1897,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1897,"column":0},"generated":{"line":1898,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1898,"column":0},"generated":{"line":1899,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1899,"column":0},"generated":{"line":1900,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1900,"column":0},"generated":{"line":1901,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1901,"column":0},"generated":{"line":1902,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1902,"column":0},"generated":{"line":1903,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1903,"column":0},"generated":{"line":1904,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1904,"column":0},"generated":{"line":1905,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1905,"column":0},"generated":{"line":1906,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1906,"column":0},"generated":{"line":1907,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1907,"column":0},"generated":{"line":1908,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1908,"column":0},"generated":{"line":1909,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1909,"column":0},"generated":{"line":1910,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1910,"column":0},"generated":{"line":1911,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1911,"column":0},"generated":{"line":1912,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1912,"column":0},"generated":{"line":1913,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1913,"column":0},"generated":{"line":1914,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1914,"column":0},"generated":{"line":1915,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1915,"column":0},"generated":{"line":1916,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1916,"column":0},"generated":{"line":1917,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1917,"column":0},"generated":{"line":1918,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1918,"column":0},"generated":{"line":1919,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1919,"column":0},"generated":{"line":1920,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1920,"column":0},"generated":{"line":1921,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1921,"column":0},"generated":{"line":1922,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1922,"column":0},"generated":{"line":1923,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1923,"column":0},"generated":{"line":1924,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1924,"column":0},"generated":{"line":1925,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1925,"column":0},"generated":{"line":1926,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1926,"column":0},"generated":{"line":1927,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1927,"column":0},"generated":{"line":1928,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1928,"column":0},"generated":{"line":1929,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1929,"column":0},"generated":{"line":1930,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1930,"column":0},"generated":{"line":1931,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1931,"column":0},"generated":{"line":1932,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1932,"column":0},"generated":{"line":1933,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1933,"column":0},"generated":{"line":1934,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1934,"column":0},"generated":{"line":1935,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1935,"column":0},"generated":{"line":1936,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1936,"column":0},"generated":{"line":1937,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1937,"column":0},"generated":{"line":1938,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1938,"column":0},"generated":{"line":1939,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1939,"column":0},"generated":{"line":1940,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1940,"column":0},"generated":{"line":1941,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1941,"column":0},"generated":{"line":1942,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1942,"column":0},"generated":{"line":1943,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1943,"column":0},"generated":{"line":1944,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1944,"column":0},"generated":{"line":1945,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1945,"column":0},"generated":{"line":1946,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1946,"column":0},"generated":{"line":1947,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1947,"column":0},"generated":{"line":1948,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1948,"column":0},"generated":{"line":1949,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1949,"column":0},"generated":{"line":1950,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1950,"column":0},"generated":{"line":1951,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1951,"column":0},"generated":{"line":1952,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1952,"column":0},"generated":{"line":1953,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1953,"column":0},"generated":{"line":1954,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1954,"column":0},"generated":{"line":1955,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1955,"column":0},"generated":{"line":1956,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1956,"column":0},"generated":{"line":1957,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1957,"column":0},"generated":{"line":1958,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1958,"column":0},"generated":{"line":1959,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1959,"column":0},"generated":{"line":1960,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1960,"column":0},"generated":{"line":1961,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1961,"column":0},"generated":{"line":1962,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1962,"column":0},"generated":{"line":1963,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1963,"column":0},"generated":{"line":1964,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1964,"column":0},"generated":{"line":1965,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1965,"column":0},"generated":{"line":1966,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1966,"column":0},"generated":{"line":1967,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1967,"column":0},"generated":{"line":1968,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1968,"column":0},"generated":{"line":1969,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1969,"column":0},"generated":{"line":1970,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1970,"column":0},"generated":{"line":1971,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1971,"column":0},"generated":{"line":1972,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1972,"column":0},"generated":{"line":1973,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1973,"column":0},"generated":{"line":1974,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1974,"column":0},"generated":{"line":1975,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1975,"column":0},"generated":{"line":1976,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1976,"column":0},"generated":{"line":1977,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1977,"column":0},"generated":{"line":1978,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1978,"column":0},"generated":{"line":1979,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1979,"column":0},"generated":{"line":1980,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1980,"column":0},"generated":{"line":1981,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1981,"column":0},"generated":{"line":1982,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1982,"column":0},"generated":{"line":1983,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1983,"column":0},"generated":{"line":1984,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1984,"column":0},"generated":{"line":1985,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1985,"column":0},"generated":{"line":1986,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1986,"column":0},"generated":{"line":1987,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1987,"column":0},"generated":{"line":1988,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1988,"column":0},"generated":{"line":1989,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1989,"column":0},"generated":{"line":1990,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1990,"column":0},"generated":{"line":1991,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1991,"column":0},"generated":{"line":1992,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1992,"column":0},"generated":{"line":1993,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1993,"column":0},"generated":{"line":1994,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1994,"column":0},"generated":{"line":1995,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1995,"column":0},"generated":{"line":1996,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1996,"column":0},"generated":{"line":1997,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1997,"column":0},"generated":{"line":1998,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1998,"column":0},"generated":{"line":1999,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":1999,"column":0},"generated":{"line":2000,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2000,"column":0},"generated":{"line":2001,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2001,"column":0},"generated":{"line":2002,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2002,"column":0},"generated":{"line":2003,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2003,"column":0},"generated":{"line":2004,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2004,"column":0},"generated":{"line":2005,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2005,"column":0},"generated":{"line":2006,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2006,"column":0},"generated":{"line":2007,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2007,"column":0},"generated":{"line":2008,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2008,"column":0},"generated":{"line":2009,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2009,"column":0},"generated":{"line":2010,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2010,"column":0},"generated":{"line":2011,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2011,"column":0},"generated":{"line":2012,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2012,"column":0},"generated":{"line":2013,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2013,"column":0},"generated":{"line":2014,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2014,"column":0},"generated":{"line":2015,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2015,"column":0},"generated":{"line":2016,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2016,"column":0},"generated":{"line":2017,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2017,"column":0},"generated":{"line":2018,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2018,"column":0},"generated":{"line":2019,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2019,"column":0},"generated":{"line":2020,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2020,"column":0},"generated":{"line":2021,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2021,"column":0},"generated":{"line":2022,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2022,"column":0},"generated":{"line":2023,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2023,"column":0},"generated":{"line":2024,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2024,"column":0},"generated":{"line":2025,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2025,"column":0},"generated":{"line":2026,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2026,"column":0},"generated":{"line":2027,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2027,"column":0},"generated":{"line":2028,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2028,"column":0},"generated":{"line":2029,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2029,"column":0},"generated":{"line":2030,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2030,"column":0},"generated":{"line":2031,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2031,"column":0},"generated":{"line":2032,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2032,"column":0},"generated":{"line":2033,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2033,"column":0},"generated":{"line":2034,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2034,"column":0},"generated":{"line":2035,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2035,"column":0},"generated":{"line":2036,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2036,"column":0},"generated":{"line":2037,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2037,"column":0},"generated":{"line":2038,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2038,"column":0},"generated":{"line":2039,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2039,"column":0},"generated":{"line":2040,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2040,"column":0},"generated":{"line":2041,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2041,"column":0},"generated":{"line":2042,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2042,"column":0},"generated":{"line":2043,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2043,"column":0},"generated":{"line":2044,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2044,"column":0},"generated":{"line":2045,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2045,"column":0},"generated":{"line":2046,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2046,"column":0},"generated":{"line":2047,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2047,"column":0},"generated":{"line":2048,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2048,"column":0},"generated":{"line":2049,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2049,"column":0},"generated":{"line":2050,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2050,"column":0},"generated":{"line":2051,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2051,"column":0},"generated":{"line":2052,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2052,"column":0},"generated":{"line":2053,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2053,"column":0},"generated":{"line":2054,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2054,"column":0},"generated":{"line":2055,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2055,"column":0},"generated":{"line":2056,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2056,"column":0},"generated":{"line":2057,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2057,"column":0},"generated":{"line":2058,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2058,"column":0},"generated":{"line":2059,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2059,"column":0},"generated":{"line":2060,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2060,"column":0},"generated":{"line":2061,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2061,"column":0},"generated":{"line":2062,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2062,"column":0},"generated":{"line":2063,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2063,"column":0},"generated":{"line":2064,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2064,"column":0},"generated":{"line":2065,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2065,"column":0},"generated":{"line":2066,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2066,"column":0},"generated":{"line":2067,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2067,"column":0},"generated":{"line":2068,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2068,"column":0},"generated":{"line":2069,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2069,"column":0},"generated":{"line":2070,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2070,"column":0},"generated":{"line":2071,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2071,"column":0},"generated":{"line":2072,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2072,"column":0},"generated":{"line":2073,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2073,"column":0},"generated":{"line":2074,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2074,"column":0},"generated":{"line":2075,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2075,"column":0},"generated":{"line":2076,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2076,"column":0},"generated":{"line":2077,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2077,"column":0},"generated":{"line":2078,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2078,"column":0},"generated":{"line":2079,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2079,"column":0},"generated":{"line":2080,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2080,"column":0},"generated":{"line":2081,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2081,"column":0},"generated":{"line":2082,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2082,"column":0},"generated":{"line":2083,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2083,"column":0},"generated":{"line":2084,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2084,"column":0},"generated":{"line":2085,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2085,"column":0},"generated":{"line":2086,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2086,"column":0},"generated":{"line":2087,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2087,"column":0},"generated":{"line":2088,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2088,"column":0},"generated":{"line":2089,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2089,"column":0},"generated":{"line":2090,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2090,"column":0},"generated":{"line":2091,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2091,"column":0},"generated":{"line":2092,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2092,"column":0},"generated":{"line":2093,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2093,"column":0},"generated":{"line":2094,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2094,"column":0},"generated":{"line":2095,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2095,"column":0},"generated":{"line":2096,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2096,"column":0},"generated":{"line":2097,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2097,"column":0},"generated":{"line":2098,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2098,"column":0},"generated":{"line":2099,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2099,"column":0},"generated":{"line":2100,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2100,"column":0},"generated":{"line":2101,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2101,"column":0},"generated":{"line":2102,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2102,"column":0},"generated":{"line":2103,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2103,"column":0},"generated":{"line":2104,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2104,"column":0},"generated":{"line":2105,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2105,"column":0},"generated":{"line":2106,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2106,"column":0},"generated":{"line":2107,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2107,"column":0},"generated":{"line":2108,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2108,"column":0},"generated":{"line":2109,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2109,"column":0},"generated":{"line":2110,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2110,"column":0},"generated":{"line":2111,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2111,"column":0},"generated":{"line":2112,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2112,"column":0},"generated":{"line":2113,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2113,"column":0},"generated":{"line":2114,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2114,"column":0},"generated":{"line":2115,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2115,"column":0},"generated":{"line":2116,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2116,"column":0},"generated":{"line":2117,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2117,"column":0},"generated":{"line":2118,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2118,"column":0},"generated":{"line":2119,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2119,"column":0},"generated":{"line":2120,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2120,"column":0},"generated":{"line":2121,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2121,"column":0},"generated":{"line":2122,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2122,"column":0},"generated":{"line":2123,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2123,"column":0},"generated":{"line":2124,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2124,"column":0},"generated":{"line":2125,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2125,"column":0},"generated":{"line":2126,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2126,"column":0},"generated":{"line":2127,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2127,"column":0},"generated":{"line":2128,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2128,"column":0},"generated":{"line":2129,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2129,"column":0},"generated":{"line":2130,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2130,"column":0},"generated":{"line":2131,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2131,"column":0},"generated":{"line":2132,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2132,"column":0},"generated":{"line":2133,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2133,"column":0},"generated":{"line":2134,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2134,"column":0},"generated":{"line":2135,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2135,"column":0},"generated":{"line":2136,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2136,"column":0},"generated":{"line":2137,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2137,"column":0},"generated":{"line":2138,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2138,"column":0},"generated":{"line":2139,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2139,"column":0},"generated":{"line":2140,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2140,"column":0},"generated":{"line":2141,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2141,"column":0},"generated":{"line":2142,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2142,"column":0},"generated":{"line":2143,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2143,"column":0},"generated":{"line":2144,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2144,"column":0},"generated":{"line":2145,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2145,"column":0},"generated":{"line":2146,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2146,"column":0},"generated":{"line":2147,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2147,"column":0},"generated":{"line":2148,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2148,"column":0},"generated":{"line":2149,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2149,"column":0},"generated":{"line":2150,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2150,"column":0},"generated":{"line":2151,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2151,"column":0},"generated":{"line":2152,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2152,"column":0},"generated":{"line":2153,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2153,"column":0},"generated":{"line":2154,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2154,"column":0},"generated":{"line":2155,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2155,"column":0},"generated":{"line":2156,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2156,"column":0},"generated":{"line":2157,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2157,"column":0},"generated":{"line":2158,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2158,"column":0},"generated":{"line":2159,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2159,"column":0},"generated":{"line":2160,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2160,"column":0},"generated":{"line":2161,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2161,"column":0},"generated":{"line":2162,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2162,"column":0},"generated":{"line":2163,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2163,"column":0},"generated":{"line":2164,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2164,"column":0},"generated":{"line":2165,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2165,"column":0},"generated":{"line":2166,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2166,"column":0},"generated":{"line":2167,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2167,"column":0},"generated":{"line":2168,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2168,"column":0},"generated":{"line":2169,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2169,"column":0},"generated":{"line":2170,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2170,"column":0},"generated":{"line":2171,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2171,"column":0},"generated":{"line":2172,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2172,"column":0},"generated":{"line":2173,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2173,"column":0},"generated":{"line":2174,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2174,"column":0},"generated":{"line":2175,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2175,"column":0},"generated":{"line":2176,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2176,"column":0},"generated":{"line":2177,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2177,"column":0},"generated":{"line":2178,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2178,"column":0},"generated":{"line":2179,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2179,"column":0},"generated":{"line":2180,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2180,"column":0},"generated":{"line":2181,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2181,"column":0},"generated":{"line":2182,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2182,"column":0},"generated":{"line":2183,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2183,"column":0},"generated":{"line":2184,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2184,"column":0},"generated":{"line":2185,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2185,"column":0},"generated":{"line":2186,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2186,"column":0},"generated":{"line":2187,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2187,"column":0},"generated":{"line":2188,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2188,"column":0},"generated":{"line":2189,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2189,"column":0},"generated":{"line":2190,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2190,"column":0},"generated":{"line":2191,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2191,"column":0},"generated":{"line":2192,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2192,"column":0},"generated":{"line":2193,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2193,"column":0},"generated":{"line":2194,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2194,"column":0},"generated":{"line":2195,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2195,"column":0},"generated":{"line":2196,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2196,"column":0},"generated":{"line":2197,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2197,"column":0},"generated":{"line":2198,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2198,"column":0},"generated":{"line":2199,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2199,"column":0},"generated":{"line":2200,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2200,"column":0},"generated":{"line":2201,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2201,"column":0},"generated":{"line":2202,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2202,"column":0},"generated":{"line":2203,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2203,"column":0},"generated":{"line":2204,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2204,"column":0},"generated":{"line":2205,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2205,"column":0},"generated":{"line":2206,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2206,"column":0},"generated":{"line":2207,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2207,"column":0},"generated":{"line":2208,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2208,"column":0},"generated":{"line":2209,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2209,"column":0},"generated":{"line":2210,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2210,"column":0},"generated":{"line":2211,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2211,"column":0},"generated":{"line":2212,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2212,"column":0},"generated":{"line":2213,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2213,"column":0},"generated":{"line":2214,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2214,"column":0},"generated":{"line":2215,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2215,"column":0},"generated":{"line":2216,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2216,"column":0},"generated":{"line":2217,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2217,"column":0},"generated":{"line":2218,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2218,"column":0},"generated":{"line":2219,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2219,"column":0},"generated":{"line":2220,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2220,"column":0},"generated":{"line":2221,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2221,"column":0},"generated":{"line":2222,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2222,"column":0},"generated":{"line":2223,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2223,"column":0},"generated":{"line":2224,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2224,"column":0},"generated":{"line":2225,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2225,"column":0},"generated":{"line":2226,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2226,"column":0},"generated":{"line":2227,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2227,"column":0},"generated":{"line":2228,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2228,"column":0},"generated":{"line":2229,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2229,"column":0},"generated":{"line":2230,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2230,"column":0},"generated":{"line":2231,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2231,"column":0},"generated":{"line":2232,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2232,"column":0},"generated":{"line":2233,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2233,"column":0},"generated":{"line":2234,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2234,"column":0},"generated":{"line":2235,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2235,"column":0},"generated":{"line":2236,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2236,"column":0},"generated":{"line":2237,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2237,"column":0},"generated":{"line":2238,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2238,"column":0},"generated":{"line":2239,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2239,"column":0},"generated":{"line":2240,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2240,"column":0},"generated":{"line":2241,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2241,"column":0},"generated":{"line":2242,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2242,"column":0},"generated":{"line":2243,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2243,"column":0},"generated":{"line":2244,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2244,"column":0},"generated":{"line":2245,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2245,"column":0},"generated":{"line":2246,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2246,"column":0},"generated":{"line":2247,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2247,"column":0},"generated":{"line":2248,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2248,"column":0},"generated":{"line":2249,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2249,"column":0},"generated":{"line":2250,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2250,"column":0},"generated":{"line":2251,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2251,"column":0},"generated":{"line":2252,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2252,"column":0},"generated":{"line":2253,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2253,"column":0},"generated":{"line":2254,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2254,"column":0},"generated":{"line":2255,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2255,"column":0},"generated":{"line":2256,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2256,"column":0},"generated":{"line":2257,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2257,"column":0},"generated":{"line":2258,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2258,"column":0},"generated":{"line":2259,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2259,"column":0},"generated":{"line":2260,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2260,"column":0},"generated":{"line":2261,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2261,"column":0},"generated":{"line":2262,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2262,"column":0},"generated":{"line":2263,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2263,"column":0},"generated":{"line":2264,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2264,"column":0},"generated":{"line":2265,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2265,"column":0},"generated":{"line":2266,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2266,"column":0},"generated":{"line":2267,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2267,"column":0},"generated":{"line":2268,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2268,"column":0},"generated":{"line":2269,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2269,"column":0},"generated":{"line":2270,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2270,"column":0},"generated":{"line":2271,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2271,"column":0},"generated":{"line":2272,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2272,"column":0},"generated":{"line":2273,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2273,"column":0},"generated":{"line":2274,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2274,"column":0},"generated":{"line":2275,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2275,"column":0},"generated":{"line":2276,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2276,"column":0},"generated":{"line":2277,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2277,"column":0},"generated":{"line":2278,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2278,"column":0},"generated":{"line":2279,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2279,"column":0},"generated":{"line":2280,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2280,"column":0},"generated":{"line":2281,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2281,"column":0},"generated":{"line":2282,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2282,"column":0},"generated":{"line":2283,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2283,"column":0},"generated":{"line":2284,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2284,"column":0},"generated":{"line":2285,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2285,"column":0},"generated":{"line":2286,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2286,"column":0},"generated":{"line":2287,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2287,"column":0},"generated":{"line":2288,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2288,"column":0},"generated":{"line":2289,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2289,"column":0},"generated":{"line":2290,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2290,"column":0},"generated":{"line":2291,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2291,"column":0},"generated":{"line":2292,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2292,"column":0},"generated":{"line":2293,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2293,"column":0},"generated":{"line":2294,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2294,"column":0},"generated":{"line":2295,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2295,"column":0},"generated":{"line":2296,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2296,"column":0},"generated":{"line":2297,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2297,"column":0},"generated":{"line":2298,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2298,"column":0},"generated":{"line":2299,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2299,"column":0},"generated":{"line":2300,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2300,"column":0},"generated":{"line":2301,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2301,"column":0},"generated":{"line":2302,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2302,"column":0},"generated":{"line":2303,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2303,"column":0},"generated":{"line":2304,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2304,"column":0},"generated":{"line":2305,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2305,"column":0},"generated":{"line":2306,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2306,"column":0},"generated":{"line":2307,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2307,"column":0},"generated":{"line":2308,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2308,"column":0},"generated":{"line":2309,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2309,"column":0},"generated":{"line":2310,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2310,"column":0},"generated":{"line":2311,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2311,"column":0},"generated":{"line":2312,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2312,"column":0},"generated":{"line":2313,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2313,"column":0},"generated":{"line":2314,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2314,"column":0},"generated":{"line":2315,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2315,"column":0},"generated":{"line":2316,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2316,"column":0},"generated":{"line":2317,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2317,"column":0},"generated":{"line":2318,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2318,"column":0},"generated":{"line":2319,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2319,"column":0},"generated":{"line":2320,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2320,"column":0},"generated":{"line":2321,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2321,"column":0},"generated":{"line":2322,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2322,"column":0},"generated":{"line":2323,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2323,"column":0},"generated":{"line":2324,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2324,"column":0},"generated":{"line":2325,"column":0}},{"source":"../node_modules/lerc/LercDecode.js","original":{"line":2325,"column":0},"generated":{"line":2326,"column":0}}],"sources":{"../node_modules/lerc/LercDecode.js":"﻿/* jshint forin: false, bitwise: false */\n/*\nCopyright 2015-2021 Esri\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nA copy of the license and additional notices are located with the\nsource distribution at:\n\nhttp://github.com/Esri/lerc/\n\nContributors:  Johannes Schmid, (LERC v1)\n               Chayanika Khatua, (LERC v1)\n               Wenxue Ju (LERC v1, v2.x)\n*/\n\n/* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\n\n/**\n * a module for decoding LERC blobs\n * @module Lerc\n */\n(function() {\n  //this decoder supports all lerc versions, each version has its own class (LercDecode and Lerc2Decode). \n  //the exported module handles format variation autoamtically.\n\n  //the original LercDecode for Version 1\n  var LercDecode = (function() {\n\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof.\n\n    var CntZImage = {};\n\n    CntZImage.defaultNoDataValue = -3.4027999387901484e+38; // smallest Float32 value\n\n    /**\n     * Decode a LERC byte stream and return an object containing the pixel data and some required and optional\n     * information about it, such as the image's width and height.\n     *\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] Decoding options, containing any of the following properties:\n     * @config {number} [inputOffset = 0]\n     *        Skip the first inputOffset bytes of the input byte stream. A valid LERC file is expected at that position.\n     * @config {Uint8Array} [encodedMask = null]\n     *        If specified, the decoder will not read mask information from the input and use the specified encoded\n     *        mask data instead. Mask header/data must not be present in the LERC byte stream in this case.\n     * @config {number} [noDataValue = LercCode.defaultNoDataValue]\n     *        Pixel value to use for masked pixels.\n     * @config {ArrayBufferView|Array} [pixelType = Float32Array]\n     *        The desired type of the pixelData array in the return value. Note that it is the caller's responsibility to\n     *        provide an appropriate noDataValue if the default pixelType is overridden.\n     * @config {boolean} [returnMask = false]\n     *        If true, the return value will contain a maskData property of type Uint8Array which has one element per\n     *        pixel, the value of which is 1 or 0 depending on whether that pixel's data is present or masked. If the\n     *        input LERC data does not contain a mask, maskData will not be returned.\n     * @config {boolean} [returnEncodedMask = false]\n     *        If true, the return value will contain a encodedMaskData property, which can be passed into encode() as\n     *        encodedMask.\n     * @config {boolean} [returnFileInfo = false]\n     *        If true, the return value will have a fileInfo property that contains metadata obtained from the\n     *        LERC headers and the decoding process.\n     * @config {boolean} [computeUsedBitDepths = false]\n     *        If true, the fileInfo property in the return value will contain the set of all block bit depths\n     *        encountered during decoding. Will only have an effect if returnFileInfo option is true.\n     * @returns {{width, height, pixelData, minValue, maxValue, noDataValue, maskData, encodedMaskData, fileInfo}}\n     */\n    CntZImage.decode = function(input, options) {\n      options = options || {};\n\n      var skipMask = options.encodedMaskData || (options.encodedMaskData === null);\n      var parsedData = parse(input, options.inputOffset || 0, skipMask);\n\n      var noDataValue = (options.noDataValue !== null) ? options.noDataValue : CntZImage.defaultNoDataValue;\n\n      var uncompressedData = uncompressPixelValues(parsedData, options.pixelType || Float32Array,\n        options.encodedMaskData, noDataValue, options.returnMask);\n\n      var result = {\n        width: parsedData.width,\n        height: parsedData.height,\n        pixelData: uncompressedData.resultPixels,\n        minValue: uncompressedData.minValue,\n        maxValue: parsedData.pixels.maxValue,\n        noDataValue: noDataValue\n      };\n\n      if (uncompressedData.resultMask) {\n        result.maskData = uncompressedData.resultMask;\n      }\n\n      if (options.returnEncodedMask && parsedData.mask) {\n        result.encodedMaskData = parsedData.mask.bitset ? parsedData.mask.bitset : null;\n      }\n\n      if (options.returnFileInfo) {\n        result.fileInfo = formatFileInfo(parsedData);\n        if (options.computeUsedBitDepths) {\n          result.fileInfo.bitDepths = computeUsedBitDepths(parsedData);\n        }\n      }\n\n      return result;\n    };\n\n    var uncompressPixelValues = function(data, TypedArrayClass, maskBitset, noDataValue, storeDecodedMask) {\n      var blockIdx = 0;\n      var numX = data.pixels.numBlocksX;\n      var numY = data.pixels.numBlocksY;\n      var blockWidth = Math.floor(data.width / numX);\n      var blockHeight = Math.floor(data.height / numY);\n      var scale = 2 * data.maxZError;\n      var minValue = Number.MAX_VALUE, currentValue;\n      maskBitset = maskBitset || ((data.mask) ? data.mask.bitset : null);\n\n      var resultPixels, resultMask;\n      resultPixels = new TypedArrayClass(data.width * data.height);\n      if (storeDecodedMask && maskBitset) {\n        resultMask = new Uint8Array(data.width * data.height);\n      }\n      var blockDataBuffer = new Float32Array(blockWidth * blockHeight);\n\n      var xx, yy;\n      for (var y = 0; y <= numY; y++) {\n        var thisBlockHeight = (y !== numY) ? blockHeight : (data.height % numY);\n        if (thisBlockHeight === 0) {\n          continue;\n        }\n        for (var x = 0; x <= numX; x++) {\n          var thisBlockWidth = (x !== numX) ? blockWidth : (data.width % numX);\n          if (thisBlockWidth === 0) {\n            continue;\n          }\n\n          var outPtr = y * data.width * blockHeight + x * blockWidth;\n          var outStride = data.width - thisBlockWidth;\n\n          var block = data.pixels.blocks[blockIdx];\n\n          var blockData, blockPtr, constValue;\n          if (block.encoding < 2) {\n            // block is either uncompressed or bit-stuffed (encodings 0 and 1)\n            if (block.encoding === 0) {\n              // block is uncompressed\n              blockData = block.rawData;\n            } else {\n              // block is bit-stuffed\n              unstuff(block.stuffedData, block.bitsPerPixel, block.numValidPixels, block.offset, scale, blockDataBuffer, data.pixels.maxValue);\n              blockData = blockDataBuffer;\n            }\n            blockPtr = 0;\n          }\n          else if (block.encoding === 2) {\n            // block is all 0\n            constValue = 0;\n          }\n          else {\n            // block has constant value (encoding === 3)\n            constValue = block.offset;\n          }\n\n          var maskByte;\n          if (maskBitset) {\n            for (yy = 0; yy < thisBlockHeight; yy++) {\n              if (outPtr & 7) {\n                //\n                maskByte = maskBitset[outPtr >> 3];\n                maskByte <<= outPtr & 7;\n              }\n              for (xx = 0; xx < thisBlockWidth; xx++) {\n                if (!(outPtr & 7)) {\n                  // read next byte from mask\n                  maskByte = maskBitset[outPtr >> 3];\n                }\n                if (maskByte & 128) {\n                  // pixel data present\n                  if (resultMask) {\n                    resultMask[outPtr] = 1;\n                  }\n                  currentValue = (block.encoding < 2) ? blockData[blockPtr++] : constValue;\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                } else {\n                  // pixel data not present\n                  if (resultMask) {\n                    resultMask[outPtr] = 0;\n                  }\n                  resultPixels[outPtr++] = noDataValue;\n                }\n                maskByte <<= 1;\n              }\n              outPtr += outStride;\n            }\n          } else {\n            // mask not present, simply copy block over\n            if (block.encoding < 2) {\n              // duplicating this code block for performance reasons\n              // blockData case:\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  currentValue = blockData[blockPtr++];\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                }\n                outPtr += outStride;\n              }\n            }\n            else {\n              // constValue case:\n              minValue = minValue > constValue ? constValue : minValue;\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  resultPixels[outPtr++] = constValue;\n                }\n                outPtr += outStride;\n              }\n            }\n          }\n          if ((block.encoding === 1) && (blockPtr !== block.numValidPixels)) {\n            throw \"Block and Mask do not match\";\n          }\n          blockIdx++;\n        }\n      }\n\n      return {\n        resultPixels: resultPixels,\n        resultMask: resultMask,\n        minValue: minValue\n      };\n    };\n\n    var formatFileInfo = function(data) {\n      return {\n        \"fileIdentifierString\": data.fileIdentifierString,\n        \"fileVersion\": data.fileVersion,\n        \"imageType\": data.imageType,\n        \"height\": data.height,\n        \"width\": data.width,\n        \"maxZError\": data.maxZError,\n        \"eofOffset\": data.eofOffset,\n        \"mask\": data.mask ? {\n          \"numBlocksX\": data.mask.numBlocksX,\n          \"numBlocksY\": data.mask.numBlocksY,\n          \"numBytes\": data.mask.numBytes,\n          \"maxValue\": data.mask.maxValue\n        } : null,\n        \"pixels\": {\n          \"numBlocksX\": data.pixels.numBlocksX,\n          \"numBlocksY\": data.pixels.numBlocksY,\n          \"numBytes\": data.pixels.numBytes,\n          \"maxValue\": data.pixels.maxValue,\n          \"noDataValue\": data.noDataValue\n        }\n      };\n    };\n\n    var computeUsedBitDepths = function(data) {\n      var numBlocks = data.pixels.numBlocksX * data.pixels.numBlocksY;\n      var bitDepths = {};\n      for (var i = 0; i < numBlocks; i++) {\n        var block = data.pixels.blocks[i];\n        if (block.encoding === 0) {\n          bitDepths.float32 = true;\n        } else if (block.encoding === 1) {\n          bitDepths[block.bitsPerPixel] = true;\n        } else {\n          bitDepths[0] = true;\n        }\n      }\n\n      return Object.keys(bitDepths);\n    };\n\n    var parse = function(input, fp, skipMask) {\n      var data = {};\n\n      // File header\n      var fileIdView = new Uint8Array(input, fp, 10);\n      data.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      if (data.fileIdentifierString.trim() !== \"CntZImage\") {\n        throw \"Unexpected file identifier string: \" + data.fileIdentifierString;\n      }\n      fp += 10;\n      var view = new DataView(input, fp, 24);\n      data.fileVersion = view.getInt32(0, true);\n      data.imageType = view.getInt32(4, true);\n      data.height = view.getUint32(8, true);\n      data.width = view.getUint32(12, true);\n      data.maxZError = view.getFloat64(16, true);\n      fp += 24;\n\n      // Mask Header\n      if (!skipMask) {\n        view = new DataView(input, fp, 16);\n        data.mask = {};\n        data.mask.numBlocksY = view.getUint32(0, true);\n        data.mask.numBlocksX = view.getUint32(4, true);\n        data.mask.numBytes = view.getUint32(8, true);\n        data.mask.maxValue = view.getFloat32(12, true);\n        fp += 16;\n\n        // Mask Data\n        if (data.mask.numBytes > 0) {\n          var bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n          view = new DataView(input, fp, data.mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              var val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < data.mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n          data.mask.bitset = bitset;\n          fp += data.mask.numBytes;\n        }\n        else if ((data.mask.numBytes | data.mask.numBlocksY | data.mask.maxValue) === 0) {  // Special case, all nodata\n          data.mask.bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n        }\n      }\n\n      // Pixel Header\n      view = new DataView(input, fp, 16);\n      data.pixels = {};\n      data.pixels.numBlocksY = view.getUint32(0, true);\n      data.pixels.numBlocksX = view.getUint32(4, true);\n      data.pixels.numBytes = view.getUint32(8, true);\n      data.pixels.maxValue = view.getFloat32(12, true);\n      fp += 16;\n\n      var numBlocksX = data.pixels.numBlocksX;\n      var numBlocksY = data.pixels.numBlocksY;\n      // the number of blocks specified in the header does not take into account the blocks at the end of\n      // each row/column with a special width/height that make the image complete in case the width is not\n      // evenly divisible by the number of blocks.\n      var actualNumBlocksX = numBlocksX + ((data.width % numBlocksX) > 0 ? 1 : 0);\n      var actualNumBlocksY = numBlocksY + ((data.height % numBlocksY) > 0 ? 1 : 0);\n      data.pixels.blocks = new Array(actualNumBlocksX * actualNumBlocksY);\n      var blockI = 0;\n      for (var blockY = 0; blockY < actualNumBlocksY; blockY++) {\n        for (var blockX = 0; blockX < actualNumBlocksX; blockX++) {\n\n          // Block\n          var size = 0;\n          var bytesLeft = input.byteLength - fp;\n          view = new DataView(input, fp, Math.min(10, bytesLeft));\n          var block = {};\n          data.pixels.blocks[blockI++] = block;\n          var headerByte = view.getUint8(0); size++;\n          block.encoding = headerByte & 63;\n          if (block.encoding > 3) {\n            throw \"Invalid block encoding (\" + block.encoding + \")\";\n          }\n          if (block.encoding === 2) {\n            fp++;\n            continue;\n          }\n          if ((headerByte !== 0) && (headerByte !== 2)) {\n            headerByte >>= 6;\n            block.offsetType = headerByte;\n            if (headerByte === 2) {\n              block.offset = view.getInt8(1); size++;\n            } else if (headerByte === 1) {\n              block.offset = view.getInt16(1, true); size += 2;\n            } else if (headerByte === 0) {\n              block.offset = view.getFloat32(1, true); size += 4;\n            } else {\n              throw \"Invalid block offset type\";\n            }\n\n            if (block.encoding === 1) {\n              headerByte = view.getUint8(size); size++;\n              block.bitsPerPixel = headerByte & 63;\n              headerByte >>= 6;\n              block.numValidPixelsType = headerByte;\n              if (headerByte === 2) {\n                block.numValidPixels = view.getUint8(size); size++;\n              } else if (headerByte === 1) {\n                block.numValidPixels = view.getUint16(size, true); size += 2;\n              } else if (headerByte === 0) {\n                block.numValidPixels = view.getUint32(size, true); size += 4;\n              } else {\n                throw \"Invalid valid pixel count type\";\n              }\n            }\n          }\n          fp += size;\n\n          if (block.encoding === 3) {\n            continue;\n          }\n\n          var arrayBuf, store8;\n          if (block.encoding === 0) {\n            var numPixels = (data.pixels.numBytes - 1) / 4;\n            if (numPixels !== Math.floor(numPixels)) {\n              throw \"uncompressed block has invalid length\";\n            }\n            arrayBuf = new ArrayBuffer(numPixels * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, numPixels * 4));\n            var rawData = new Float32Array(arrayBuf);\n            block.rawData = rawData;\n            fp += numPixels * 4;\n          } else if (block.encoding === 1) {\n            var dataBytes = Math.ceil(block.numValidPixels * block.bitsPerPixel / 8);\n            var dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, dataBytes));\n            block.stuffedData = new Uint32Array(arrayBuf);\n            fp += dataBytes;\n          }\n        }\n      }\n      data.eofOffset = fp;\n      return data;\n    };\n\n    var unstuff = function(src, bitsPerPixel, numPixels, offset, scale, dest, maxValue) {\n      var bitMask = (1 << bitsPerPixel) - 1;\n      var i = 0, o;\n      var bitsLeft = 0;\n      var n, buffer;\n      var nmax = Math.ceil((maxValue - offset) / scale);\n      // get rid of trailing bytes that are already part of next block\n      var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n      src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n      for (o = 0; o < numPixels; o++) {\n        if (bitsLeft === 0) {\n          buffer = src[i++];\n          bitsLeft = 32;\n        }\n        if (bitsLeft >= bitsPerPixel) {\n          n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n          bitsLeft -= bitsPerPixel;\n        } else {\n          var missingBits = (bitsPerPixel - bitsLeft);\n          n = ((buffer & bitMask) << missingBits) & bitMask;\n          buffer = src[i++];\n          bitsLeft = 32 - missingBits;\n          n += (buffer >>> bitsLeft);\n        }\n        //pixel values may exceed max due to quantization\n        dest[o] = n < nmax ? offset + n * scale : maxValue;\n      }\n      return dest;\n    };\n\n    return CntZImage;\n  })();\n\n  //version 2. Supports 2.1, 2.2, 2.3\n  var Lerc2Decode = (function() {\n    \"use strict\";\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof, following LercDecode.\n\n    /*****************************************\n    * private static class bitsutffer used by Lerc2Decode\n    *******************************************/\n    var BitStuffer = {\n      //methods ending with 2 are for the new byte order used by Lerc2.3 and above.\n      //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.\n      unstuff: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits, nmax;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            dest[o] = lutArr[n];//offset + lutArr[n] * scale;\n          }\n        }\n        else {\n          nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n      },\n\n      unstuffLUT: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0;\n        var buffer;\n        var dest = [];\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);//1st one\n        return dest;\n      },\n\n      unstuff2: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            dest[o] = lutArr[n];\n          }\n        }\n        else {\n          var nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              //no unsigned left shift\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n        return dest;\n      },\n\n      unstuffLUT2: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0, bitPos = 0;\n        var buffer;\n        var dest = [];\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);\n        return dest;\n      },\n\n      originalUnstuff: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          }\n          else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          dest[o] = n;\n        }\n        return dest;\n      },\n\n      originalUnstuff2: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        //micro-optimizations\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          dest[o] = n;\n        }\n        return dest;\n      }\n    };\n\n    /*****************************************\n    *private static class used by Lerc2Decode\n    ******************************************/\n    var Lerc2Helpers = {\n      HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, treat it like constant\n      computeChecksumFletcher32: function(input) {\n\n        var sum1 = 0xffff, sum2 = 0xffff;\n        var len = input.length;\n        var words = Math.floor(len / 2);\n        var i = 0;\n        while (words) {\n          var tlen = (words >= 359) ? 359 : words;\n          words -= tlen;\n          do {\n            sum1 += (input[i++] << 8);\n            sum2 += sum1 += input[i++];\n          } while (--tlen);\n\n          sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n          sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n        }\n\n        // add the straggler byte if it exists\n        if (len & 1) {\n          sum2 += sum1 += (input[i] << 8);\n        }\n        // second reduction step to reduce sums to 16 bits\n        sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n        sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n\n        return (sum2 << 16 | sum1) >>> 0;\n      },\n\n      readHeaderInfo: function(input, data) {\n        var ptr = data.ptr;\n        var fileIdView = new Uint8Array(input, ptr, 6);\n        var headerInfo = {};\n        headerInfo.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n        if (headerInfo.fileIdentifierString.lastIndexOf(\"Lerc2\", 0) !== 0) {\n          throw \"Unexpected file identifier string (expect Lerc2 ): \" + headerInfo.fileIdentifierString;\n        }\n        ptr += 6;\n        var view = new DataView(input, ptr, 8);\n        var fileVersion = view.getInt32(0, true);\n        headerInfo.fileVersion = fileVersion;\n        ptr += 4;\n        if (fileVersion >= 3) {\n          headerInfo.checksum = view.getUint32(4, true); //nrows\n          ptr += 4;\n        }\n\n        //keys start from here\n        view = new DataView(input, ptr, 12);\n        headerInfo.height = view.getUint32(0, true); //nrows\n        headerInfo.width = view.getUint32(4, true); //ncols\n        ptr += 8;\n        if (fileVersion >= 4) {\n          headerInfo.numDims = view.getUint32(8, true);\n          ptr += 4;\n        }\n        else {\n          headerInfo.numDims = 1;\n        }\n\n        view = new DataView(input, ptr, 40);\n        headerInfo.numValidPixel = view.getUint32(0, true);\n        headerInfo.microBlockSize = view.getInt32(4, true);\n        headerInfo.blobSize = view.getInt32(8, true);\n        headerInfo.imageType = view.getInt32(12, true);\n\n        headerInfo.maxZError = view.getFloat64(16, true);\n        headerInfo.zMin = view.getFloat64(24, true);\n        headerInfo.zMax = view.getFloat64(32, true);\n        ptr += 40;\n        data.headerInfo = headerInfo;\n        data.ptr = ptr;\n\n        var checksum, keyLength;\n        if (fileVersion >= 3) {\n          keyLength = fileVersion >= 4 ? 52 : 48;\n          checksum = this.computeChecksumFletcher32(new Uint8Array(input, ptr - keyLength, headerInfo.blobSize - 14));\n          if (checksum !== headerInfo.checksum) {\n            throw \"Checksum failed.\";\n          }\n        }\n        return true;\n      },\n\n      checkMinMaxRanges: function(input, data) {\n        var headerInfo = data.headerInfo;\n        var OutPixelTypeArray = this.getDataTypeArray(headerInfo.imageType);\n        var rangeBytes = headerInfo.numDims * this.getDataTypeSize(headerInfo.imageType);\n        var minValues = this.readSubArray(input, data.ptr, OutPixelTypeArray, rangeBytes);\n        var maxValues = this.readSubArray(input, data.ptr + rangeBytes, OutPixelTypeArray, rangeBytes);\n        data.ptr += (2 * rangeBytes);\n        var i, equal = true;\n        for (i = 0; i < headerInfo.numDims; i++) {\n          if (minValues[i] !== maxValues[i]) {\n            equal = false;\n            break;\n          }\n        }\n        headerInfo.minValues = minValues;\n        headerInfo.maxValues = maxValues;\n        return equal;\n      },\n\n      readSubArray: function(input, ptr, OutPixelTypeArray, numBytes) {\n        var rawData;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        return rawData;\n      },\n\n      readMask: function(input, data) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var numValidPixel = headerInfo.numValidPixel;\n\n        var view = new DataView(input, ptr, 4);\n        var mask = {};\n        mask.numBytes = view.getUint32(0, true);\n        ptr += 4;\n\n        // Mask Data\n        if ((0 === numValidPixel || numPixels === numValidPixel) && 0 !== mask.numBytes) {\n          throw (\"invalid mask\");\n        }\n        var bitset, resultMask;\n        if (numValidPixel === 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          mask.bitset = bitset;\n          resultMask = new Uint8Array(numPixels);\n          data.pixels.resultMask = resultMask;\n          ptr += mask.numBytes;\n        }// ????? else if (data.mask.numBytes > 0 && data.mask.numBytes< data.numValidPixel) {\n        else if (mask.numBytes > 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          view = new DataView(input, ptr, mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0, val = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n\n          resultMask = new Uint8Array(numPixels);\n          var mb = 0, k = 0;\n\n          for (k = 0; k < numPixels; k++) {\n            if (k & 7) {\n              mb = bitset[k >> 3];\n              mb <<= k & 7;\n            }\n            else {\n              mb = bitset[k >> 3];\n            }\n            if (mb & 128) {\n              resultMask[k] = 1;\n            }\n          }\n          data.pixels.resultMask = resultMask;\n\n          mask.bitset = bitset;\n          ptr += mask.numBytes;\n        }\n        data.ptr = ptr;\n        data.mask = mask;\n        return true;\n      },\n\n      readDataOneSweep: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var imageType = headerInfo.imageType;\n        var numBytes = headerInfo.numValidPixel * Lerc2Helpers.getDataTypeSize(imageType) * numDims;\n        //data.pixels.numBytes = numBytes;\n        var rawData;\n        var mask = data.pixels.resultMask;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        if (rawData.length === numPixels * numDims) {\n          if (useBSQForOutputDim) {\n            data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(rawData, numPixels, numDims, OutPixelTypeArray, true);\n          }\n          else {\n            data.pixels.resultPixels = rawData;\n          }\n        }\n        else  //mask\n        {\n          data.pixels.resultPixels = new OutPixelTypeArray(numPixels * numDims);\n          var z = 0, k = 0, i = 0, nStart = 0;\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k;\n                  for (i = 0; i < numDims; i++, nStart+=numPixels) {\n                    data.pixels.resultPixels[nStart] = rawData[z++];\n                  }\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    data.pixels.resultPixels[nStart + i] = rawData[z++];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                data.pixels.resultPixels[k] = rawData[z++];\n              }\n            }\n          }\n        }\n        ptr += numBytes;\n        data.ptr = ptr;       //return data;\n        return true;\n      },\n\n      readHuffmanTree: function(input, data) {\n        var BITS_MAX = this.HUFFMAN_LUT_BITS_MAX; //8 is slow for the large test image\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading code table\n        *************************/\n        var view = new DataView(input, data.ptr, 16);\n        data.ptr += 16;\n        var version = view.getInt32(0, true);\n        if (version < 2) {\n          throw \"unsupported Huffman version\";\n        }\n        var size = view.getInt32(4, true);\n        var i0 = view.getInt32(8, true);\n        var i1 = view.getInt32(12, true);\n        if (i0 >= i1) {\n          return false;\n        }\n        var blockDataBuffer = new Uint32Array(i1 - i0);\n        Lerc2Helpers.decodeBits(input, data, blockDataBuffer);\n        var codeTable = []; //size\n        var i, j, k, len;\n\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          codeTable[j] = { first: blockDataBuffer[i - i0], second: null };\n        }\n\n        var dataBytes = input.byteLength - data.ptr;\n        var dataWords = Math.ceil(dataBytes / 4);\n        var arrayBuf = new ArrayBuffer(dataWords * 4);\n        var store8 = new Uint8Array(arrayBuf);\n        store8.set(new Uint8Array(input, data.ptr, dataBytes));\n        var stuffedData = new Uint32Array(arrayBuf); //must start from x*4\n        var bitPos = 0, word, srcPtr = 0;\n        word = stuffedData[0];\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            codeTable[j].second = (word << bitPos) >>> (32 - len);\n\n            if (32 - bitPos >= len) {\n              bitPos += len;\n              if (bitPos === 32) {\n                bitPos = 0;\n                srcPtr++;\n                word = stuffedData[srcPtr];\n              }\n            }\n            else {\n              bitPos += len - 32;\n              srcPtr++;\n              word = stuffedData[srcPtr];\n              codeTable[j].second |= word >>> (32 - bitPos);\n            }\n          }\n        }\n\n        //finished reading code table\n\n        /* ************************\n        * building lut\n        *************************/\n        var numBitsLUT = 0, numBitsLUTQick = 0;\n        var tree = new TreeNode();\n        for (i = 0; i < codeTable.length; i++) {\n          if (codeTable[i] !== undefined) {\n            numBitsLUT = Math.max(numBitsLUT, codeTable[i].first);\n          }\n        }\n        if (numBitsLUT >= BITS_MAX) {\n          numBitsLUTQick = BITS_MAX;\n        }\n        else {\n          numBitsLUTQick = numBitsLUT;\n        }\n        // for debugging purpose\n        // if (numBitsLUT >= 30) {\n        //   console.log(\"WARning, large NUM LUT BITS IS \" + numBitsLUT);\n        // }\n        var decodeLut = [], entry, code, numEntries, jj, currentBit, node;\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            entry = [len, j];\n            if (len <= numBitsLUTQick) {\n              code = codeTable[j].second << (numBitsLUTQick - len);\n              numEntries = 1 << (numBitsLUTQick - len);\n              for (k = 0; k < numEntries; k++) {\n                decodeLut[code | k] = entry;\n              }\n            }\n            else {\n              //build tree\n              code = codeTable[j].second;\n              node = tree;\n              for (jj = len - 1; jj >= 0; jj--) {\n                currentBit = code >>> jj & 1; //no left shift as length could be 30,31\n                if (currentBit) {\n                  if (!node.right) {\n                    node.right = new TreeNode();\n                  }\n                  node = node.right;\n                }\n                else {\n                  if (!node.left) {\n                    node.left = new TreeNode();\n                  }\n                  node = node.left;\n                }\n                if (jj === 0 && !node.val) {\n                  node.val = entry[1];\n                }\n              }\n            }\n          }\n        }\n        return {\n          decodeLut: decodeLut,\n          numBitsLUTQick: numBitsLUTQick,\n          numBitsLUT: numBitsLUT,\n          tree: tree,\n          stuffedData: stuffedData,\n          srcPtr: srcPtr,\n          bitPos: bitPos\n        };\n      },\n\n      readHuffman: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var height = data.headerInfo.height;\n        var width = data.headerInfo.width;\n        var numPixels = width * height;\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading huffman structure info\n        *************************/\n        var huffmanInfo = this.readHuffmanTree(input, data);\n        var decodeLut = huffmanInfo.decodeLut;\n        var tree = huffmanInfo.tree;\n        //stuffedData includes huffman headers\n        var stuffedData = huffmanInfo.stuffedData;\n        var srcPtr = huffmanInfo.srcPtr;\n        var bitPos = huffmanInfo.bitPos;\n        var numBitsLUTQick = huffmanInfo.numBitsLUTQick;\n        var numBitsLUT = huffmanInfo.numBitsLUT;\n        var offset = data.headerInfo.imageType === 0 ? 128 : 0;\n        /*************************\n        *  decode\n        ***************************/\n        var node, val, delta, mask = data.pixels.resultMask, valTmp, valTmpQuick, currentBit;\n        var i, j, k, ii;\n        var prevVal = 0;\n        if (bitPos > 0) {\n          srcPtr++;\n          bitPos = 0;\n        }\n        var word = stuffedData[srcPtr];\n        var deltaEncode = data.encodeMode === 1;\n        var resultPixelsAllDim = new OutPixelTypeArray(numPixels * numDims);\n        var resultPixels = resultPixelsAllDim;\n        var iDim;\n        // TODO: reevaluate the need to keep inlined decoding code as IE support is phasing out\n        if (numDims < 2 || deltaEncode) {\n          for (iDim = 0; iDim < numDims; iDim++) {\n            if (numDims > 1) {\n              //get the mem block of current dimension\n              resultPixels = new OutPixelTypeArray(resultPixelsAllDim.buffer, numPixels * iDim, numPixels);\n              prevVal = 0;\n            }\n            if (data.headerInfo.numValidPixel === width * height) { //all valid\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;// >>> deltaBits;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                  }\n                  if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n    \n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n    \n                  delta = val - offset;\n                  if (deltaEncode) {\n                    if (j > 0) {\n                      delta += prevVal;    // use overflow\n                    }\n                    else if (i > 0) {\n                      delta += resultPixels[k - width];\n                    }\n                    else {\n                      delta += prevVal;\n                    }\n                    delta &= 0xFF; //overflow\n                    resultPixels[k] = delta;//overflow\n                    prevVal = delta;\n                  }\n                  else {\n                    resultPixels[k] = delta;\n                  }\n                }\n              }\n            }\n            else { //not all valid, use mask\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  if (mask[k]) {\n                    val = 0;\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUTQick) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                    {\n                      val = decodeLut[valTmpQuick][1];\n                      bitPos += decodeLut[valTmpQuick][0];\n                    }\n                    else {\n                      valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                      if (32 - bitPos < numBitsLUT) {\n                        valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                        valTmpQuick = valTmp;// >>> deltaBits;\n                      }\n                      node = tree;\n                      for (ii = 0; ii < numBitsLUT; ii++) {\n                        currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                        node = currentBit ? node.right : node.left;\n                        if (!(node.left || node.right)) {\n                          val = node.val;\n                          bitPos = bitPos + ii + 1;\n                          break;\n                        }\n                      }\n                    }\n    \n                    if (bitPos >= 32) {\n                      bitPos -= 32;\n                      srcPtr++;\n                      word = stuffedData[srcPtr];\n                    }\n    \n                    delta = val - offset;\n                    if (deltaEncode) {\n                      if (j > 0 && mask[k - 1]) {\n                        delta += prevVal;    // use overflow\n                      }\n                      else if (i > 0 && mask[k - width]) {\n                        delta += resultPixels[k - width];\n                      }\n                      else {\n                        delta += prevVal;\n                      }\n    \n                      delta &= 0xFF; //overflow\n                      resultPixels[k] = delta;//overflow\n                      prevVal = delta;\n                    }\n                    else {\n                      resultPixels[k] = delta;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          for (k = 0, i = 0; i < height; i++) {\n            for (j = 0; j < width; j++) {\n              k = i * width + j;\n              if (!mask || mask[k]) {\n                for (iDim = 0; iDim < numDims; iDim++, k+=numPixels) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;\n                  }\n                  if (decodeLut[valTmpQuick])\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n\n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n\n                  delta = val - offset;\n                  resultPixels[k] = delta;\n                }\n              }\n            }\n          }\n        }\n        data.ptr = data.ptr + (srcPtr + 1) * 4 + (bitPos > 0 ? 4 : 0);\n        data.pixels.resultPixels = resultPixelsAllDim;\n        //swap for BIP layout\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(resultPixelsAllDim, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      decodeBits: function(input, data, blockDataBuffer, offset, iDim) {\n        {\n          //bitstuff encoding is 3\n          var headerInfo = data.headerInfo;\n          var fileVersion = headerInfo.fileVersion;\n          //var block = {};\n          var blockPtr = 0;\n          var viewByteLength = ((input.byteLength - data.ptr) >= 5) ? 5 : (input.byteLength - data.ptr);\n          var view = new DataView(input, data.ptr, viewByteLength);\n          var headerByte = view.getUint8(0);\n          blockPtr++;\n          var bits67 = headerByte >> 6;\n          var n = (bits67 === 0) ? 4 : 3 - bits67;\n          var doLut = (headerByte & 32) > 0 ? true : false;//5th bit\n          var numBits = headerByte & 31;\n          var numElements = 0;\n          if (n === 1) {\n            numElements = view.getUint8(blockPtr); blockPtr++;\n          } else if (n === 2) {\n            numElements = view.getUint16(blockPtr, true); blockPtr += 2;\n          } else if (n === 4) {\n            numElements = view.getUint32(blockPtr, true); blockPtr += 4;\n          } else {\n            throw \"Invalid valid pixel count type\";\n          }\n          //fix: huffman codes are bit stuffed, but not bound by data's max value, so need to use originalUnstuff\n          //offset = offset || 0;\n          var scale = 2 * headerInfo.maxZError;\n          var stuffedData, arrayBuf, store8, dataBytes, dataWords;\n          var lutArr, lutData, lutBytes, lutBitsPerElement, bitsPerPixel;\n          var zMax = headerInfo.numDims > 1 ? headerInfo.maxValues[iDim] : headerInfo.zMax;\n          if (doLut) {\n            data.counter.lut++;\n            lutBytes = view.getUint8(blockPtr);\n            lutBitsPerElement = numBits;\n            blockPtr++;\n            dataBytes = Math.ceil((lutBytes - 1) * numBits / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n\n            data.ptr += blockPtr;\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n\n            lutData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n\n            bitsPerPixel = 0;\n            while ((lutBytes - 1) >>> bitsPerPixel) {\n              bitsPerPixel++;\n            }\n            dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n            stuffedData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n            if (fileVersion >= 3) {\n              lutArr = BitStuffer.unstuffLUT2(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            else {\n              lutArr = BitStuffer.unstuffLUT(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            //lutArr.unshift(0);\n            if (fileVersion >= 3) {\n              //BitStuffer.unstuff2(block, blockDataBuffer, headerInfo.zMax);\n              BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n            else {\n              BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n          }\n          else {\n            //console.debug(\"bitstuffer\");\n            data.counter.bitstuffer++;\n            bitsPerPixel = numBits;\n            data.ptr += blockPtr;\n            if (bitsPerPixel > 0) {\n              dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n              dataWords = Math.ceil(dataBytes / 4);\n              arrayBuf = new ArrayBuffer(dataWords * 4);\n              store8 = new Uint8Array(arrayBuf);\n              store8.set(new Uint8Array(input, data.ptr, dataBytes));\n              stuffedData = new Uint32Array(arrayBuf);\n              data.ptr += dataBytes;\n              if (fileVersion >= 3) {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n              else {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n            }\n          }\n        }\n\n      },\n\n      readTiles: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var width = headerInfo.width;\n        var height = headerInfo.height;\n        var numPixels = width * height;\n        var microBlockSize = headerInfo.microBlockSize;\n        var imageType = headerInfo.imageType;\n        var dataTypeSize = Lerc2Helpers.getDataTypeSize(imageType);\n        var numBlocksX = Math.ceil(width / microBlockSize);\n        var numBlocksY = Math.ceil(height / microBlockSize);\n        data.pixels.numBlocksY = numBlocksY;\n        data.pixels.numBlocksX = numBlocksX;\n        data.pixels.ptr = 0;\n        var row = 0, col = 0, blockY = 0, blockX = 0, thisBlockHeight = 0, thisBlockWidth = 0, bytesLeft = 0, headerByte = 0, bits67 = 0, testCode = 0, outPtr = 0, outStride = 0, numBytes = 0, bytesleft = 0, z = 0, blockPtr = 0;\n        var view, block, arrayBuf, store8, rawData;\n        var blockEncoding;\n        var blockDataBuffer = new OutPixelTypeArray(microBlockSize * microBlockSize);\n        var lastBlockHeight = (height % microBlockSize) || microBlockSize;\n        var lastBlockWidth = (width % microBlockSize) || microBlockSize;\n        var offsetType, offset;\n        var numDims = headerInfo.numDims, iDim;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        var fileVersion = headerInfo.fileVersion;\n        var fileVersionCheckNum = fileVersion >= 5 ? 14 : 15;\n        var isDiffEncoding;\n        var zMax = headerInfo.zMax;\n        //var resultPixelsAllDim = resultPixels;\n        var resultPixelsPrevDim;\n        for (blockY = 0; blockY < numBlocksY; blockY++) {\n          thisBlockHeight = (blockY !== numBlocksY - 1) ? microBlockSize : lastBlockHeight;\n          for (blockX = 0; blockX < numBlocksX; blockX++) {\n            //console.debug(\"y\" + blockY + \" x\" + blockX);\n            thisBlockWidth = (blockX !== numBlocksX - 1) ? microBlockSize : lastBlockWidth;\n\n            outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n            outStride = width - thisBlockWidth;\n\n            for (iDim = 0; iDim < numDims; iDim++) {\n              if (numDims > 1) {\n                resultPixelsPrevDim = resultPixels;\n                outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n                resultPixels = new OutPixelTypeArray(data.pixels.resultPixels.buffer, numPixels * iDim * dataTypeSize, numPixels);\n                zMax = headerInfo.maxValues[iDim];\n              } else {\n                resultPixelsPrevDim = null;\n              }\n              bytesLeft = input.byteLength - data.ptr;\n              view = new DataView(input, data.ptr, Math.min(10, bytesLeft));\n              block = {};\n              blockPtr = 0;\n              headerByte = view.getUint8(0);\n              blockPtr++;\n              isDiffEncoding = headerInfo.fileVersion >= 5 ? headerByte & 4 : 0;\n              bits67 = (headerByte >> 6) & 0xFF;\n              testCode = (headerByte >> 2) & fileVersionCheckNum;    // use bits 2345 for integrity check\n              if (testCode !== (((blockX * microBlockSize) >> 3) & fileVersionCheckNum)) {\n                throw \"integrity issue\";\n              }\n\n              if (isDiffEncoding && iDim === 0) {\n                throw \"integrity issue\";\n              }\n\n              blockEncoding = headerByte & 3;\n              if (blockEncoding > 3) {\n                data.ptr += blockPtr;\n                throw \"Invalid block encoding (\" + blockEncoding + \")\";\n              }\n              else if (blockEncoding === 2) { //constant 0\n                if (isDiffEncoding) {\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        }\n                        outPtr++;\n                      }\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        outPtr++;\n                      }\n                    }\n                  }\n                }\n                data.counter.constant++;\n                data.ptr += blockPtr;\n                continue;\n              }\n              else if (blockEncoding === 0) {  //uncompressed\n                if (isDiffEncoding) {\n                  // doesn't make sense, should not happen\n                  throw \"integrity issue\";\n                }\n                data.counter.uncompressed++;\n                data.ptr += blockPtr;\n                numBytes = thisBlockHeight * thisBlockWidth * dataTypeSize;\n                bytesleft = input.byteLength - data.ptr;\n                numBytes = numBytes < bytesleft ? numBytes : bytesleft;\n                //bit alignment\n                arrayBuf = new ArrayBuffer((numBytes % dataTypeSize) === 0 ? numBytes : (numBytes + dataTypeSize - numBytes % dataTypeSize));\n                store8 = new Uint8Array(arrayBuf);\n                store8.set(new Uint8Array(input, data.ptr, numBytes));\n                rawData = new OutPixelTypeArray(arrayBuf);\n                z = 0;\n                if (mask) {\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      if (mask[outPtr]) {\n                        resultPixels[outPtr] = rawData[z++];\n                      }\n                      outPtr++;\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                else {//all valid\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      resultPixels[outPtr++] = rawData[z++];\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                data.ptr += z * dataTypeSize;\n              }\n              else { //1 or 3\n                offsetType = Lerc2Helpers.getDataTypeUsed((isDiffEncoding && imageType < 6) ? 4 : imageType, bits67);\n                offset = Lerc2Helpers.getOnePixel(block, blockPtr, offsetType, view);\n                blockPtr += Lerc2Helpers.getDataTypeSize(offsetType);\n                if (blockEncoding === 3) //constant offset value\n                {\n                  data.ptr += blockPtr;\n                  data.counter.constantoffset++;\n                  //you can delete the following resultMask case in favor of performance because val is constant and users use nodata mask, otherwise nodatavalue post processing handles it too.\n                  //while the above statement is true, we're not doing it as we want to keep invalid pixel value at 0 rather than arbitrary values\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n                else { //bitstuff encoding is 3\n                  data.ptr += blockPtr;\n                  //heavy lifting\n                  Lerc2Helpers.decodeBits(input, data, blockDataBuffer, offset, iDim);\n                  blockPtr = 0;\n                  // duplicate code to favor performance, diff encoding is for multidimension only\n                  if (isDiffEncoding) {\n                    if (mask) {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          if (mask[outPtr]) {\n                            resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          }\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                    else {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                  }\n                  else if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++];\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr++] = blockDataBuffer[blockPtr++];\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        //swap for BIP: it's always easier for clients to handle BSQ so we keep existing logic and introduce a swap here to minimze changes\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(data.pixels.resultPixels, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      /*****************\n      *  private methods (helper methods)\n      *****************/\n\n      formatFileInfo: function(data) {\n        return {\n          \"fileIdentifierString\": data.headerInfo.fileIdentifierString,\n          \"fileVersion\": data.headerInfo.fileVersion,\n          \"imageType\": data.headerInfo.imageType,\n          \"height\": data.headerInfo.height,\n          \"width\": data.headerInfo.width,\n          \"numValidPixel\": data.headerInfo.numValidPixel,\n          \"microBlockSize\": data.headerInfo.microBlockSize,\n          \"blobSize\": data.headerInfo.blobSize,\n          \"maxZError\": data.headerInfo.maxZError,\n          \"pixelType\": Lerc2Helpers.getPixelType(data.headerInfo.imageType),\n          \"eofOffset\": data.eofOffset,\n          \"mask\": data.mask ? {\n            \"numBytes\": data.mask.numBytes\n          } : null,\n          \"pixels\": {\n            \"numBlocksX\": data.pixels.numBlocksX,\n            \"numBlocksY\": data.pixels.numBlocksY,\n            //\"numBytes\": data.pixels.numBytes,\n            \"maxValue\": data.headerInfo.zMax,\n            \"minValue\": data.headerInfo.zMin,\n            \"noDataValue\": data.noDataValue\n          }\n        };\n      },\n\n      constructConstantSurface: function(data, useBSQForOutputDim) {\n        var val = data.headerInfo.zMax;\n        var valMin = data.headerInfo.zMin;\n        var maxValues = data.headerInfo.maxValues;\n        var numDims = data.headerInfo.numDims;\n        var numPixels = data.headerInfo.height * data.headerInfo.width;\n        var i = 0, k = 0, nStart = 0;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        if (mask) {\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  if (mask[k]) {\n                    resultPixels[nStart + k] = val;\n                  }\n                }\n              }  \n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    resultPixels[nStart + numDims] = maxValues[i];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                resultPixels[k] = val;\n              }\n            }\n          }\n        }\n        else {\n          if (numDims > 1 && valMin !== val) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  resultPixels[nStart + k] = val;\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                nStart = k * numDims;\n                for (i = 0; i < numDims; i++) {\n                  resultPixels[nStart + i] = maxValues[i];\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels * numDims; k++) {\n              resultPixels[k] = val;\n            }\n          }\n        }\n        return;\n      },\n\n      getDataTypeArray: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = Int8Array;\n            break;\n          case 1: //byte\n            tp = Uint8Array;\n            break;\n          case 2: //short\n            tp = Int16Array;\n            break;\n          case 3: //ushort\n            tp = Uint16Array;\n            break;\n          case 4:\n            tp = Int32Array;\n            break;\n          case 5:\n            tp = Uint32Array;\n            break;\n          case 6:\n            tp = Float32Array;\n            break;\n          case 7:\n            tp = Float64Array;\n            break;\n          default:\n            tp = Float32Array;\n        }\n        return tp;\n      },\n\n      getPixelType: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = \"S8\";\n            break;\n          case 1: //byte\n            tp = \"U8\";\n            break;\n          case 2: //short\n            tp = \"S16\";\n            break;\n          case 3: //ushort\n            tp = \"U16\";\n            break;\n          case 4:\n            tp = \"S32\";\n            break;\n          case 5:\n            tp = \"U32\";\n            break;\n          case 6:\n            tp = \"F32\";\n            break;\n          case 7:\n            tp = \"F64\";\n            break;\n          default:\n            tp = \"F32\";\n        }\n        return tp;\n      },\n\n      isValidPixelValue: function(t, val) {\n        if (val == null) {\n          return false;\n        }\n        var isValid;\n        switch (t) {\n          case 0: //char\n            isValid = val >= -128 && val <= 127;\n            break;\n          case 1: //byte  (unsigned char)\n            isValid = val >= 0 && val <= 255;\n            break;\n          case 2: //short\n            isValid = val >= -32768 && val <= 32767;\n            break;\n          case 3: //ushort\n            isValid = val >= 0 && val <= 65536;\n            break;\n          case 4: //int 32\n            isValid = val >= -2147483648 && val <= 2147483647;\n            break;\n          case 5: //uinit 32\n            isValid = val >= 0 && val <= 4294967296;\n            break;\n          case 6:\n            isValid = val >= -3.4027999387901484e+38 && val <= 3.4027999387901484e+38;\n            break;\n          case 7:\n            isValid = val >= -1.7976931348623157e+308 && val <= 1.7976931348623157e+308;\n            break;\n          default:\n            isValid = false;\n        }\n        return isValid;\n      },\n\n      getDataTypeSize: function(t) {\n        var s = 0;\n        switch (t) {\n          case 0: //ubyte\n          case 1: //byte\n            s = 1;\n            break;\n          case 2: //short\n          case 3: //ushort\n            s = 2;\n            break;\n          case 4:\n          case 5:\n          case 6:\n            s = 4;\n            break;\n          case 7:\n            s = 8;\n            break;\n          default:\n            s = t;\n        }\n        return s;\n      },\n\n      getDataTypeUsed: function(dt, tc) {\n        var t = dt;\n        switch (dt) {\n          case 2: //short\n          case 4: //long\n            t = dt - tc;\n            break;\n          case 3: //ushort\n          case 5: //ulong\n            t = dt - 2 * tc;\n            break;\n          case 6: //float\n            if (0 === tc) {\n              t = dt;\n            }\n            else if (1 === tc) {\n              t = 2;\n            }\n            else {\n              t = 1;//byte\n            }\n            break;\n          case 7: //double\n            if (0 === tc) {\n              t = dt;\n            }\n            else {\n              t = dt - 2 * tc + 1;\n            }\n            break;\n          default:\n            t = dt;\n            break;\n        }\n        return t;\n      },\n\n      getOnePixel: function(block, blockPtr, offsetType, view) {\n        var temp = 0;\n        switch (offsetType) {\n          case 0: //char\n            temp = view.getInt8(blockPtr);\n            break;\n          case 1: //byte\n            temp = view.getUint8(blockPtr);\n            break;\n          case 2:\n            temp = view.getInt16(blockPtr, true);\n            break;\n          case 3:\n            temp = view.getUint16(blockPtr, true);\n            break;\n          case 4:\n            temp = view.getInt32(blockPtr, true);\n            break;\n          case 5:\n            temp = view.getUInt32(blockPtr, true);\n            break;\n          case 6:\n            temp = view.getFloat32(blockPtr, true);\n            break;\n          case 7:\n            temp = view.getFloat64(blockPtr, true);\n            break;\n          default:\n            throw (\"the decoder does not understand this pixel type\");\n        }\n        return temp;\n      },\n\n      swapDimensionOrder: function(pixels, numPixels, numDims, OutPixelTypeArray, inputIsBIP) {\n        var i = 0, j = 0, iDim = 0, temp = 0, swap = pixels;\n        if (numDims > 1) {\n          swap = new OutPixelTypeArray(numPixels * numDims);\n          if (inputIsBIP) {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[temp] = pixels[j++];\n              }\n            }  \n          }\n          else {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[j++] = pixels[temp];\n              }\n            }\n          }\n        }\n        return swap;\n      }\n    };\n\n    /***************************************************\n    *private class for a tree node. Huffman code is in Lerc2Helpers\n    ****************************************************/\n    var TreeNode = function(val, left, right) {\n      this.val = val;\n      this.left = left;\n      this.right = right;\n    };\n\n    var Lerc2Decode = {\n      /*\n      * ********removed options compared to LERC1. We can bring some of them back if needed.\n       * removed pixel type. LERC2 is typed and doesn't require user to give pixel type\n       * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.\n       * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.\n       * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,\n       *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.\n       *       We can add it back later if their's a clear requirement.\n       * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)\n       * removed computeUsedBitDepths.\n       *\n       *\n       * response changes compared to LERC1\n       * 1. encodedMaskData is not available\n       * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)\n       * 3. maskData is always available\n      */\n      /*****************\n      *  public properties\n      ******************/\n      //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable\n\n      /*****************\n      *  public methods\n      *****************/\n\n      /**\n       * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.\n       *\n       * @param {ArrayBuffer} input The LERC input byte stream\n       * @param {object} [options] options Decoding options\n       * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position\n       * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process\n       * @param {boolean} [options.returnPixelInterleavedDims]  If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n       */\n      decode: function(/*byte array*/ input, /*object*/ options) {\n        //currently there's a bug in the sparse array, so please do not set to false\n        options = options || {};\n        var noDataValue = options.noDataValue;\n\n        //initialize\n        var i = 0, data = {};\n        data.ptr = options.inputOffset || 0;\n        data.pixels = {};\n\n        // File header\n        if (!Lerc2Helpers.readHeaderInfo(input, data)) {\n          return;\n        }\n\n        var headerInfo = data.headerInfo;\n        var fileVersion = headerInfo.fileVersion;\n        var OutPixelTypeArray = Lerc2Helpers.getDataTypeArray(headerInfo.imageType);\n\n        // version check\n        if (fileVersion > 5) {\n          throw \"unsupported lerc version 2.\" + fileVersion;\n        }\n\n        // Mask Header\n        Lerc2Helpers.readMask(input, data);\n        if (headerInfo.numValidPixel !== headerInfo.width * headerInfo.height && !data.pixels.resultMask) {\n          data.pixels.resultMask = options.maskData;\n        }\n\n        var numPixels = headerInfo.width * headerInfo.height;\n        data.pixels.resultPixels = new OutPixelTypeArray(numPixels * headerInfo.numDims);\n\n        data.counter = {\n          onesweep: 0,\n          uncompressed: 0,\n          lut: 0,\n          bitstuffer: 0,\n          constant: 0,\n          constantoffset: 0\n        };\n        var useBSQForOutputDim = !options.returnPixelInterleavedDims;\n        if (headerInfo.numValidPixel !== 0) {\n          //not tested\n          if (headerInfo.zMax === headerInfo.zMin) //constant surface\n          {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else if (fileVersion >= 4 && Lerc2Helpers.checkMinMaxRanges(input, data)) {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else {\n            var view = new DataView(input, data.ptr, 2);\n            var bReadDataOneSweep = view.getUint8(0);\n            data.ptr++;\n            if (bReadDataOneSweep) {\n              //console.debug(\"OneSweep\");\n              Lerc2Helpers.readDataOneSweep(input, data, OutPixelTypeArray, useBSQForOutputDim);\n            }\n            else {\n              //lerc2.1: //bitstuffing + lut\n              //lerc2.2: //bitstuffing + lut + huffman\n              //lerc2.3: new bitstuffer\n              if (fileVersion > 1 && headerInfo.imageType <= 1 && Math.abs(headerInfo.maxZError - 0.5) < 0.00001) {\n                //this is 2.x plus 8 bit (unsigned and signed) data, possiblity of Huffman\n                var flagHuffman = view.getUint8(1);\n                data.ptr++;\n                data.encodeMode = flagHuffman;\n                if (flagHuffman > 2 || (fileVersion < 4 && flagHuffman > 1)) {\n                  throw \"Invalid Huffman flag \" + flagHuffman;\n                }\n                if (flagHuffman) {//1 - delta Huffman, 2 - Huffman\n                  //console.log(\"Huffman\");\n                  Lerc2Helpers.readHuffman(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n                else {\n                  //console.log(\"Tiles\");\n                  Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n              }\n              else { //lerc2.x non-8 bit data\n                //console.log(\"Tiles\");\n                Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n              }\n            }\n          }\n        }\n\n        data.eofOffset = data.ptr;\n        var diff;\n        if (options.inputOffset) {\n          diff = data.headerInfo.blobSize + options.inputOffset - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect eof: dataptr \" + data.ptr + \" offset \" + options.inputOffset + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = options.inputOffset + data.headerInfo.blobSize;\n          }\n        }\n        else {\n          diff = data.headerInfo.blobSize - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect first band eof: dataptr \" + data.ptr + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = data.headerInfo.blobSize;\n          }\n        }\n\n        var result = {\n          width: headerInfo.width,\n          height: headerInfo.height,\n          pixelData: data.pixels.resultPixels,\n          minValue: headerInfo.zMin,\n          maxValue: headerInfo.zMax,\n          validPixelCount: headerInfo.numValidPixel,\n          dimCount: headerInfo.numDims,\n          dimStats: {\n            minValues: headerInfo.minValues,\n            maxValues: headerInfo.maxValues\n          },\n          maskData: data.pixels.resultMask\n          //noDataValue: noDataValue\n        };\n\n        //we should remove this if there's no existing client\n        //optional noDataValue processing, it's user's responsiblity\n        if (data.pixels.resultMask && Lerc2Helpers.isValidPixelValue(headerInfo.imageType, noDataValue)) {\n          var mask = data.pixels.resultMask;\n          for (i = 0; i < numPixels; i++) {\n            if (!mask[i]) {\n              result.pixelData[i] = noDataValue;\n            }\n          }\n          result.noDataValue = noDataValue;\n        }\n        data.noDataValue = noDataValue;\n        if (options.returnFileInfo) {\n          result.fileInfo = Lerc2Helpers.formatFileInfo(data);\n        }\n        return result;\n      },\n\n      getBandCount: function(/*byte array*/ input) {\n        var count = 0;\n        var i = 0;\n        var temp = {};\n        temp.ptr = 0;\n        temp.pixels = {};\n        while (i < input.byteLength - 58) {\n          Lerc2Helpers.readHeaderInfo(input, temp);\n          i += temp.headerInfo.blobSize;\n          count++;\n          temp.ptr = i;\n        }\n        return count;\n      }\n    };\n\n    return Lerc2Decode;\n  })();\n\n  var isPlatformLittleEndian = (function() {\n    var a = new ArrayBuffer(4);\n    var b = new Uint8Array(a);\n    var c = new Uint32Array(a);\n    c[0] = 1;\n    return b[0] === 1;\n  })();\n\n  var Lerc = {\n    /************wrapper**********************************************/\n    /**\n     * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.\n     *\n     * @alias module:Lerc\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] The decoding options below are optional.\n     * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.\n     * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.\n     * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.\n     * @param {boolean} [options.returnPixelInterleavedDims] (nDim LERC2 only) If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n     * @returns {{width, height, pixels, pixelType, mask, statistics}}\n       * @property {number} width Width of decoded image.\n       * @property {number} height Height of decoded image.\n       * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.\n       * @property {string} pixelType The type of pixels represented in the output.\n       * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.\n       * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values\n    **/\n    decode: function(encodedData, options) {\n      if (!isPlatformLittleEndian) {\n        throw \"Big endian system is not supported.\";\n      }\n      options = options || {};\n      var inputOffset = options.inputOffset || 0;\n      var fileIdView = new Uint8Array(encodedData, inputOffset, 10);\n      var fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      var lerc, majorVersion;\n      if (fileIdentifierString.trim() === \"CntZImage\") {\n        lerc = LercDecode;\n        majorVersion = 1;\n      }\n      else if (fileIdentifierString.substring(0, 5) === \"Lerc2\") {\n        lerc = Lerc2Decode;\n        majorVersion = 2;\n      }\n      else {\n        throw \"Unexpected file identifier string: \" + fileIdentifierString;\n      }\n\n      var iPlane = 0, eof = encodedData.byteLength - 10, encodedMaskData, bandMasks = [], bandMask, maskData;\n      var decodedPixelBlock = {\n        width: 0,\n        height: 0,\n        pixels: [],\n        pixelType: options.pixelType,\n        mask: null,\n        statistics: []\n      };\n      var uniqueBandMaskCount = 0;\n\n      while (inputOffset < eof) {\n        var result = lerc.decode(encodedData, {\n          inputOffset: inputOffset,//for both lerc1 and lerc2\n          encodedMaskData: encodedMaskData,//lerc1 only\n          maskData: maskData,//lerc2 only\n          returnMask: iPlane === 0 ? true : false,//lerc1 only\n          returnEncodedMask: iPlane === 0 ? true : false,//lerc1 only\n          returnFileInfo: true,//for both lerc1 and lerc2\n          returnPixelInterleavedDims: options.returnPixelInterleavedDims,//for ndim lerc2 only\n          pixelType: options.pixelType || null,//lerc1 only\n          noDataValue: options.noDataValue || null//lerc1 only\n        });\n\n        inputOffset = result.fileInfo.eofOffset;\n        maskData = result.maskData;//lerc2\n        if (iPlane === 0) {\n          encodedMaskData = result.encodedMaskData;//lerc1\n          decodedPixelBlock.width = result.width;\n          decodedPixelBlock.height = result.height;\n          decodedPixelBlock.dimCount = result.dimCount || 1;\n          //decodedPixelBlock.dimStats = decodedPixelBlock.dimStats;\n          decodedPixelBlock.pixelType = result.pixelType || result.fileInfo.pixelType;\n          decodedPixelBlock.mask = maskData;\n        }\n        if (majorVersion > 1) {\n          if (maskData) {\n            bandMasks.push(maskData);\n          }\n          if (result.fileInfo.mask && result.fileInfo.mask.numBytes > 0) {\n            uniqueBandMaskCount++;\n          }\n        }\n\n        iPlane++;\n        decodedPixelBlock.pixels.push(result.pixelData);\n        decodedPixelBlock.statistics.push({\n          minValue: result.minValue,\n          maxValue: result.maxValue,\n          noDataValue: result.noDataValue,\n          dimStats: result.dimStats\n        });\n      }\n      var i, j, numPixels;\n      if (majorVersion > 1 && uniqueBandMaskCount > 1) {\n        numPixels = decodedPixelBlock.width * decodedPixelBlock.height;\n        decodedPixelBlock.bandMasks = bandMasks;\n        maskData = new Uint8Array(numPixels);\n        maskData.set(bandMasks[0]);\n        for (i = 1; i < bandMasks.length; i++) {\n          bandMask = bandMasks[i];\n          for (j = 0; j < numPixels; j++) {\n            maskData[j] = maskData[j] & bandMask[j];\n          }\n        }\n        decodedPixelBlock.maskData = maskData;\n      }\n\n      return decodedPixelBlock;\n    }\n  };\n\n  if (typeof define === \"function\" && define.amd) {/* jshint ignore:line */\n    //amd loaders such as dojo and requireJS\n    //http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\n    define([], function() { return Lerc; });/* jshint ignore:line */\n  }\n  else if (typeof module !== \"undefined\" && module.exports) {/* jshint ignore:line */\n    //commonJS module 1.0/1.1/1.1.1 systems, such as nodeJS\n    //http://wiki.commonjs.org/wiki/Modules\n    module.exports = Lerc;/* jshint ignore:line */\n  }\n  else {\n    //assign to this, most likely window\n    this.Lerc = Lerc;\n  }\n\n})();\n"},"lineCount":2326}},"error":null,"hash":"5d12de85ae7db0a997fd784beadb497e","cacheData":{"env":{}}}